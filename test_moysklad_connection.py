#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ú–æ–π–°–∫–ª–∞–¥ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
"""
import asyncio
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.integrations.moysklad_client import MoySkladClient
from utils.logger import app_logger


async def test_moysklad_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ú–æ–π–°–∫–ª–∞–¥"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ú–æ–π–°–∫–ª–∞–¥...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        client = MoySkladClient()
        
        print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"üìä URL: {client.base_url}")
        print(f"üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {'Bearer —Ç–æ–∫–µ–Ω' if client.token else 'Basic auth'}")
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π GET –∑–∞–ø—Ä–æ—Å –∫ API
        print("\nüîå –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API")
        
        # –î–µ–ª–∞–µ–º –±–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ context/employee (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ)
        response = await client._make_request("GET", "context/employee")
        
        if response:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API —Ä–∞–±–æ—Ç–∞–µ—Ç")
            user_name = response.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') 
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API")
            return False
            
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤  
        print("\nüì¶ –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤")
        products_response = await client._make_request("GET", "entity/product", params={"limit": 3})
        
        if products_response and 'rows' in products_response:
            products = products_response['rows']
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
            
            for i, product in enumerate(products[:2], 1):
                name = product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                # –¶–µ–Ω—ã –≤ –ú–æ–π–°–∫–ª–∞–¥ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∫–æ–ø–µ–π–∫–∞—Ö
                sale_prices = product.get('salePrices', [])
                price = sale_prices[0].get('value', 0) / 100 if sale_prices else 0
                print(f"  {i}. {name} - {price}‚ÇΩ")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤")
            
        # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
        print("\nüë• –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤")  
        counterparties_response = await client._make_request("GET", "entity/counterparty", params={"limit": 3})
        
        if counterparties_response and 'rows' in counterparties_response:
            counterparties = counterparties_response['rows']
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤: {len(counterparties)}")
            
            for i, cp in enumerate(counterparties[:2], 1):
                name = cp.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                print(f"  {i}. {name}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤")
        
        print(f"\nüéâ –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        app_logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ú–æ–π–°–∫–ª–∞–¥: {e}")
        return False


if __name__ == "__main__":
    success = asyncio.run(test_moysklad_connection())
    if success:
        print("\n‚úÖ –ú–æ–π–°–∫–ª–∞–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("\n‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ú–æ–π–°–∫–ª–∞–¥")