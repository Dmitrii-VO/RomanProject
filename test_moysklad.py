#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ú–æ–π–°–∫–ª–∞–¥ API
"""
import asyncio
import os
from src.integrations.moysklad_client import MoySkladClient
from src.catalog.product_manager import ProductManager
from utils.logger import app_logger


async def test_moysklad_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ú–æ–π–°–∫–ª–∞–¥ API"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ú–æ–π–°–∫–ª–∞–¥...")
    
    client = MoySkladClient()
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
    products = await client.get_products(limit=5)
    
    if products:
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
        for i, product in enumerate(products, 1):
            print(f"  {i}. {product['name']} - {product['price']:.0f}‚ÇΩ (–≤ –Ω–∞–ª–∏—á–∏–∏: {product['stock']})")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    return products


async def test_product_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...")
    
    manager = ProductManager()
    
    # –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É "—è–Ω—Ç–∞—Ä—å"
    print("\nüìç –ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤—É '—è–Ω—Ç–∞—Ä—å':")
    products = await manager.search_products("—è–Ω—Ç–∞—Ä—å")
    print(f"–ù–∞–π–¥–µ–Ω–æ: {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
    
    # –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–∫–æ–ª—å—Ü–∞"
    print("\nüìç –ü–æ–∏—Å–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–∫–æ–ª—å—Ü–∞':")
    rings = await manager.search_products("", category="–∫–æ–ª—å—Ü–∞")
    print(f"–ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–µ—Ü: {len(rings)}")
    
    # –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ –ø–æ –±—é–¥–∂–µ—Ç—É 5000-10000 —Ä—É–±
    print("\nüìç –ü–æ–∏—Å–∫ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 5000-10000‚ÇΩ:")
    budget_products = await manager.search_products("", budget_min=5000, budget_max=10000)
    print(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±—é–¥–∂–µ—Ç–µ: {len(budget_products)}")
    
    # –¢–µ—Å—Ç 4: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    print("\nüìç –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –∫–æ–ª—å—Ü–∞ –¥–æ 8000‚ÇΩ:")
    recommendations = await manager.get_product_recommendations(8000, "–∫–æ–ª—å—Ü–∞")
    print(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(recommendations)}")
    for product in recommendations:
        print(f"  ‚Ä¢ {product['name']} - {product['price']:.0f}‚ÇΩ")
    
    return products


async def test_budget_parsing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    print("\nüí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –±—é–¥–∂–µ—Ç–∞...")
    
    manager = ProductManager()
    
    test_messages = [
        "–ò—â—É –∫–æ–ª—å—Ü–æ –¥–æ 5000 —Ä—É–±–ª–µ–π",
        "–ë—é–¥–∂–µ—Ç 10 —Ç—ã—Å—è—á",
        "–•–æ—á—É —Å–µ—Ä—å–≥–∏ –∑–∞ 3000‚ÇΩ",
        "–î–æ 15000 —Ä—É–±",
        "–ë—é–¥–∂–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 7 500 —Ä—É–±–ª–µ–π"
    ]
    
    for message in test_messages:
        budget = manager.parse_budget_from_text(message)
        print(f"  '{message}' ‚Üí {budget}‚ÇΩ")


async def test_category_extraction():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    print("\nüìÇ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...")
    
    manager = ProductManager()
    
    test_messages = [
        "–ü–æ–∫–∞–∂–∏—Ç–µ –∫–æ–ª—å—Ü–∞ —Å —è–Ω—Ç–∞—Ä–µ–º",
        "–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ—Ä—å–≥–∏",
        "–ï—Å—Ç—å –ª–∏ –±—Ä–∞—Å–ª–µ—Ç—ã –≤ –Ω–∞–ª–∏—á–∏–∏?",
        "–ò—â—É –∫—Ä–∞—Å–∏–≤—ã–π –∫—É–ª–æ–Ω",
        "–ü–æ–∫–∞–∂–∏—Ç–µ –±—É—Å—ã –∏–∑ —è–Ω—Ç–∞—Ä—è"
    ]
    
    for message in test_messages:
        category = manager.extract_category_from_text(message)
        print(f"  '{message}' ‚Üí {category}")


async def test_product_formatting():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —á–∞—Ç–∞"""
    print("\nüí¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤...")
    
    manager = ProductManager()
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤
    products = await manager.search_products("—è–Ω—Ç–∞—Ä—å")
    
    if products:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
        formatted_list = manager.format_products_list(products[:3], max_products=3)
        print("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:")
        print(formatted_list)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä
        print("\n–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:")
        formatted_product = manager.format_product_for_chat(products[0])
        print(formatted_product)


async def test_categories_summary():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
    
    manager = ProductManager()
    
    categories_info = await manager.get_categories_summary()
    print(categories_info)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ú–æ–π–°–∫–ª–∞–¥ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("=" * 50)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        required_vars = ['MOYSKLAD_TOKEN', 'MOYSKLAD_LOGIN', 'MOYSKLAD_PASSWORD']
        missing_vars = [var for var in required_vars if not os.getenv(var)]
        
        if missing_vars:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
        products = await test_moysklad_connection()
        
        if products:
            await test_product_search()
            await test_budget_parsing()
            await test_category_extraction() 
            await test_product_formatting()
            await test_categories_summary()
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        app_logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ú–æ–π–°–∫–ª–∞–¥: {e}")


if __name__ == "__main__":
    asyncio.run(main())