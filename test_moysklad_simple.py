#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ú–æ–π–°–∫–ª–∞–¥ API
"""
import asyncio
import os
from src.integrations.moysklad_client import MoySkladClient
from src.catalog.product_manager import ProductManager
from utils.logger import app_logger


async def test_basic_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ú–æ–π–°–∫–ª–∞–¥ API"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ú–æ–π–°–∫–ª–∞–¥...")
    
    client = MoySkladClient()
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    products = await client.get_products(limit=3)
    
    if products:
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
        for i, product in enumerate(products, 1):
            print(f"  {i}. {product['name']} - {product['price']:.0f}‚ÇΩ")
            print(f"     –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product['category']}")
            if product.get('article'):
                print(f"     –ê—Ä—Ç–∏–∫—É–ª: {product['article']}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    return products


async def test_product_manager_basic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ProductManager"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ProductManager...")
    
    manager = ProductManager()
    
    # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    print("\nüìç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤:")
    products = await manager.search_products("", budget_min=None, budget_max=None, category=None)
    print(f"–ù–∞–π–¥–µ–Ω–æ: {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
    
    if products:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞
        for i, product in enumerate(products[:3], 1):
            print(f"  {i}. {product['name']} - {product['price']:.0f}‚ÇΩ")
    
    return products


async def test_text_parsing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –±—é–¥–∂–µ—Ç–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    print("\nüí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞...")
    
    manager = ProductManager()
    
    # –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –±—é–¥–∂–µ—Ç–∞
    test_messages = [
        "–ò—â—É –∫–æ–ª—å—Ü–æ –¥–æ 5000 —Ä—É–±–ª–µ–π",
        "–ë—é–¥–∂–µ—Ç 10000",
        "–•–æ—á—É —Å–µ—Ä—å–≥–∏ –∑–∞ 3000‚ÇΩ"
    ]
    
    print("\n–ü–∞—Ä—Å–∏–Ω–≥ –±—é–¥–∂–µ—Ç–∞:")
    for message in test_messages:
        budget = manager.parse_budget_from_text(message)
        print(f"  '{message}' ‚Üí {budget}‚ÇΩ")
    
    # –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    category_messages = [
        "–ü–æ–∫–∞–∂–∏—Ç–µ –∫–æ–ª—å—Ü–∞",
        "–•–æ—á—É —Å–µ—Ä—å–≥–∏",
        "–ï—Å—Ç—å –±—Ä–∞—Å–ª–µ—Ç—ã?"
    ]
    
    print("\n–ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:")
    for message in category_messages:
        category = manager.extract_category_from_text(message)
        print(f"  '{message}' ‚Üí {category}")


async def test_product_formatting():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤"""
    print("\nüí¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    manager = ProductManager()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    products = await manager.search_products("")
    
    if products:
        print("\n–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:")
        formatted = manager.format_product_for_chat(products[0])
        print(formatted)
        
        print("\n–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ (–ø–µ—Ä–≤—ã–µ 2 —Ç–æ–≤–∞—Ä–∞):")
        formatted_list = manager.format_products_list(products[:2], max_products=2)
        print(formatted_list)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ú–æ–π–°–∫–ª–∞–¥ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("=" * 50)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if not os.getenv("MOYSKLAD_TOKEN"):
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç MOYSKLAD_TOKEN")
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
        products = await test_basic_connection()
        
        if products:
            await test_product_manager_basic()
            await test_text_parsing()
            await test_product_formatting()
        
        print("\n‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        app_logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ú–æ–π–°–∫–ª–∞–¥: {e}")


if __name__ == "__main__":
    asyncio.run(main())