#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ª–æ–≥–∏–∫–∏ –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤
"""
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.ai.consultant_v2 import AmberAIConsultantV2

async def test_catalog_viewing():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤
    """
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ª–æ–≥–∏–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
    consultant = AmberAIConsultantV2()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    test_user_id = 12345
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    test_cases = [
        {
            "message": "–ø–æ–∫–∞–∂–∏—Ç–µ –±—Ä–∞—Å–ª–µ—Ç—ã",
            "expected": "catalog_view",
            "description": "–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ –±—Ä–∞—Å–ª–µ—Ç–æ–≤"
        },
        {
            "message": "–ø–æ–∫–∞–∂–∏ –∫–æ–ª—å—Ü–∞",
            "expected": "catalog_view", 
            "description": "–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ –∫–æ–ª–µ—Ü"
        },
        {
            "message": "–∫–∞–∫–∏–µ –µ—Å—Ç—å —Å–µ—Ä—å–≥–∏",
            "expected": "catalog_view",
            "description": "–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ —Å–µ—Ä–µ–∂–µ–∫"
        },
        {
            "message": "—Ö–æ—á—É –∫—É–ø–∏—Ç—å –±—Ä–∞—Å–ª–µ—Ç –∑–∞ 5000 —Ä—É–±–ª–µ–π",
            "expected": "order_automation",
            "description": "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞ —Å –Ω–∞–º–µ—Ä–µ–Ω–∏–µ–º –ø–æ–∫—É–ø–∫–∏"
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüìã –¢–µ—Å—Ç {i}: {test_case['description']}")
        print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: \"{test_case['message']}\"")
        print(f"üéØ –û–∂–∏–¥–∞–µ—Ç—Å—è: {test_case['expected']}")
        print("-" * 50)
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            response = await consultant.process_message(test_user_id, test_case['message'])
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            is_catalog = "üõçÔ∏è" in response and "–∫–∞—Ç–∞–ª–æ–≥–∞" in response.lower()
            is_order = "–∑–∞–∫–∞–∑" in response.lower() and ("–æ—Ñ–æ—Ä–º" in response.lower() or "–∞–≤—Ç–æ–º–∞—Ç" in response.lower())
            
            if test_case['expected'] == "catalog_view" and is_catalog:
                print("‚úÖ –ü–†–û–ô–î–ï–ù: –ü–æ–∫–∞–∑–∞–Ω –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤")
            elif test_case['expected'] == "order_automation" and is_order:
                print("‚úÖ –ü–†–û–ô–î–ï–ù: –ó–∞–ø—É—â–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞")
            else:
                print("‚ùå –ù–ï –ü–†–û–ô–î–ï–ù: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            
            print(f"üì§ –û—Ç–≤–µ—Ç —Å–∏—Å—Ç–µ–º—ã:")
            print(response[:300] + ("..." if len(response) > 300 else ""))
            
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
    
    print("\n" + "=" * 60)
    print("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    asyncio.run(test_catalog_viewing())