#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
"""
import asyncio
import pytest
import os
import sys
from typing import List, Dict

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from src.search.embeddings_manager import EmbeddingsManager
from src.catalog.product_manager import ProductManager
from src.ai.consultant import AmberAIConsultant
from utils.logger import app_logger


class TestSemanticSearch:
    """–¢–µ—Å—Ç—ã —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    
    @pytest.fixture
    async def embeddings_manager(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è EmbeddingsManager"""
        return EmbeddingsManager("data/test_embeddings.db")
    
    @pytest.fixture 
    async def product_manager(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è ProductManager"""
        return ProductManager()
    
    @pytest.fixture
    async def ai_consultant(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è AmberAIConsultant"""
        return AmberAIConsultant()
    
    def test_threshold_calculation(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å—á–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–æ—Ä–æ–≥–æ–≤ —Å—Ö–æ–¥—Å—Ç–≤–∞"""
        product_manager = ProductManager()
        
        # –¢–µ—Å—Ç 1: –û–±—â–∏–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        threshold = product_manager._calculate_semantic_threshold("–∫—Ä–∞—Å–∏–≤–æ–µ —É–∫—Ä–∞—à–µ–Ω–∏–µ")
        assert threshold == 0.4, f"–û–∂–∏–¥–∞–ª—Å—è –ø–æ—Ä–æ–≥ 0.4, –ø–æ–ª—É—á–µ–Ω {threshold}"
        
        # –¢–µ—Å—Ç 2: –ó–∞–ø—Ä–æ—Å —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
        threshold = product_manager._calculate_semantic_threshold("–∫—Ä–∞—Å–∏–≤–æ–µ —É–∫—Ä–∞—à–µ–Ω–∏–µ", category="–∫–æ–ª—å—Ü–∞")
        assert threshold == 0.5, f"–û–∂–∏–¥–∞–ª—Å—è –ø–æ—Ä–æ–≥ 0.5, –ø–æ–ª—É—á–µ–Ω {threshold}"
        
        # –¢–µ—Å—Ç 3: –ó–∞–ø—Ä–æ—Å —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –∏ –±—é–¥–∂–µ—Ç–æ–º
        threshold = product_manager._calculate_semantic_threshold("–∫—Ä–∞—Å–∏–≤–æ–µ —É–∫—Ä–∞—à–µ–Ω–∏–µ", category="–∫–æ–ª—å—Ü–∞", has_budget=True)
        assert threshold == 0.6, f"–û–∂–∏–¥–∞–ª—Å—è –ø–æ—Ä–æ–≥ 0.6, –ø–æ–ª—É—á–µ–Ω {threshold}"
        
        # –¢–µ—Å—Ç 4: –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        threshold = product_manager._calculate_semantic_threshold("–∫–æ–ª—å—Ü–æ –∫—Ä–∞—Å–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞", category="–∫–æ–ª—å—Ü–∞", has_budget=True)
        assert threshold == 0.7, f"–û–∂–∏–¥–∞–ª—Å—è –ø–æ—Ä–æ–≥ 0.7, –ø–æ–ª—É—á–µ–Ω {threshold}"
        
        # –¢–µ—Å—Ç 5: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç—Å—è
        threshold = product_manager._calculate_semantic_threshold("—Å—Ç–∏–ª—å–Ω–æ–µ –∫–æ–ª—å—Ü–æ –æ—Å–æ–±–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞", category="–∫–æ–ª—å—Ü–∞", has_budget=True)
        assert threshold <= 0.8, f"–ü–æ—Ä–æ–≥ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 0.8, –ø–æ–ª—É—á–µ–Ω {threshold}"
        
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø–æ—Ä–æ–≥–æ–≤ —Å—Ö–æ–¥—Å—Ç–≤–∞ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    
    async def test_embeddings_generation(self, embeddings_manager):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"""
        test_texts = [
            "–ö—Ä–∞—Å–∏–≤–æ–µ –∫–æ–ª—å—Ü–æ —Å —è–Ω—Ç–∞—Ä–µ–º",
            "–°–µ—Ä—å–≥–∏ –∏–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ —è–Ω—Ç–∞—Ä—è",
            "–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π –±—Ä–∞—Å–ª–µ—Ç"
        ]
        
        for text in test_texts:
            embedding = await embeddings_manager.generate_embedding(text)
            assert len(embedding) == 1536, f"–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {len(embedding)}"
            assert isinstance(embedding, list), "–≠–º–±–µ–¥–¥–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º"
            assert all(isinstance(x, float) for x in embedding), "–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å float"
        
        print("‚úÖ –¢–µ—Å—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    
    async def test_semantic_search_quality(self, product_manager):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö"""
        
        # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        test_cases = [
            {
                'query': '—Ö–æ—á—É —É–∫—Ä–∞—à–µ–Ω–∏–µ –Ω–∞ —Ä—É–∫—É',
                'expected_categories': ['–±—Ä–∞—Å–ª–µ—Ç—ã', '–∫–æ–ª—å—Ü–∞'],
                'description': '–ü–æ–∏—Å–∫ —É–∫—Ä–∞—à–µ–Ω–∏–π –¥–ª—è —Ä—É–∫'
            },
            {
                'query': '—á—Ç–æ-—Ç–æ –Ω–µ–∂–Ω–æ–µ –Ω–∞ —à–µ—é',
                'expected_categories': ['–∫—É–ª–æ–Ω—ã', '–±—É—Å—ã', '–ø–æ–¥–≤–µ—Å–∫–∏'],
                'description': '–ü–æ–∏—Å–∫ —É–∫—Ä–∞—à–µ–Ω–∏–π –¥–ª—è —à–µ–∏'
            },
            {
                'query': '–∫–æ–ª—å—Ü–æ —Å –∫–∞–º–Ω–µ–º',
                'expected_categories': ['–∫–æ–ª—å—Ü–∞'],
                'description': '–ü–æ–∏—Å–∫ –∫–æ–ª–µ—Ü —Å –∫–∞–º–Ω—è–º–∏'
            },
            {
                'query': '–ø–æ–¥–∞—Ä–æ–∫ –¥–µ–≤—É—à–∫–µ',
                'expected_categories': ['–∫–æ–ª—å—Ü–∞', '—Å–µ—Ä—å–≥–∏', '–∫—É–ª–æ–Ω—ã', '–±—Ä–∞—Å–ª–µ—Ç—ã'],
                'description': '–ü–æ–∏—Å–∫ –ø–æ–¥–∞—Ä–æ—á–Ω—ã—Ö —É–∫—Ä–∞—à–µ–Ω–∏–π'
            },
            {
                'query': '—è–Ω—Ç–∞—Ä—å –≤ —Å–µ—Ä–µ–±—Ä–µ',
                'expected_categories': ['–∫–æ–ª—å—Ü–∞', '—Å–µ—Ä—å–≥–∏', '–∫—É–ª–æ–Ω—ã', '–±—Ä–∞—Å–ª–µ—Ç—ã'],
                'description': '–ü–æ–∏—Å–∫ —Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π —Å —è–Ω—Ç–∞—Ä–µ–º'
            }
        ]
        
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞:")
        
        for i, test_case in enumerate(test_cases, 1):
            print(f"\n--- –¢–µ—Å—Ç {i}: {test_case['description']} ---")
            print(f"–ó–∞–ø—Ä–æ—Å: '{test_case['query']}'")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
            results = await product_manager.semantic_search(test_case['query'], limit=5, threshold=0.3)
            
            print(f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
            
            if results:
                print("–¢–æ–ø-3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
                for j, result in enumerate(results[:3], 1):
                    print(f"  {j}. {result['name']} (—Å—Ö–æ–¥—Å—Ç–≤–æ: {result['similarity_score']:.3f})")
                    print(f"     –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {result.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
                    print(f"     –¶–µ–Ω–∞: {result['price']:.0f}‚ÇΩ")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                found_categories = [result.get('category', '').lower() for result in results]
                relevant_found = any(
                    any(expected.lower() in category for expected in test_case['expected_categories'])
                    for category in found_categories if category
                )
                
                if relevant_found:
                    print("‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
                else:
                    print("‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º–∏")
            else:
                print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        print("\n‚úÖ –¢–µ—Å—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
    
    async def test_smart_search_fallback(self, product_manager):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É fallback –ª–æ–≥–∏–∫–∏ —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        
        print("\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å fallback:")
        
        # –¢–µ—Å—Ç 1: –ó–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º –ø–æ–∏—Å–∫–æ–º
        print("\n--- –¢–µ—Å—Ç 1: –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >=3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤) ---")
        results = await product_manager.smart_search("—è–Ω—Ç–∞—Ä—å", budget_min=None, budget_max=None, category=None)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {len(results)}")
        
        # –¢–µ—Å—Ç 2: –û—á–µ–Ω—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º—É –ø–æ–∏—Å–∫—É)
        print("\n--- –¢–µ—Å—Ç 2: –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫) ---")
        specific_results = await product_manager.smart_search("—ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ —É–∫—Ä–∞—à–µ–Ω–∏–µ –¥–ª—è –æ—Å–æ–±–æ–≥–æ —Å–ª—É—á–∞—è")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {len(specific_results)}")
        
        # –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        print("\n--- –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ —Å –±—é–¥–∂–µ—Ç–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ ---")
        budget_results = await product_manager.smart_search("–∫—Ä–∞—Å–∏–≤—ã–π", budget_min=1000, budget_max=3000)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –±—é–¥–∂–µ—Ç–æ–º: {len(budget_results)}")
        
        if budget_results:
            prices = [result['price'] for result in budget_results]
            print(f"–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: {min(prices):.0f}‚ÇΩ - {max(prices):.0f}‚ÇΩ")
        
        print("\n‚úÖ –¢–µ—Å—Ç—ã —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
    
    async def test_ai_integration(self, ai_consultant):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º"""
        
        print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º:")
        
        test_messages = [
            "–•–æ—á—É —á—Ç–æ-—Ç–æ –∫—Ä–∞—Å–∏–≤–æ–µ –Ω–∞ —Ä—É–∫—É –¥–ª—è –æ—Å–æ–±–æ–≥–æ —Å–ª—É—á–∞—è",
            "–ü–æ–∫–∞–∂–∏—Ç–µ –Ω–µ–∂–Ω—ã–µ —É–∫—Ä–∞—à–µ–Ω–∏—è –Ω–∞ —à–µ—é",
            "–ò—â—É –ø–æ–¥–∞—Ä–æ–∫ –¥–µ–≤—É—à–∫–µ –¥–æ 5000 —Ä—É–±–ª–µ–π",
            "–•–æ—á—É –∫–æ–ª—å—Ü–æ —Å –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º –∫–∞–º–Ω–µ–º"
        ]
        
        for i, message in enumerate(test_messages, 1):
            print(f"\n--- –ò–ò –¢–µ—Å—Ç {i} ---")
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: '{message}'")
            
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
                response = await ai_consultant.process_message(999990 + i, message)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
                has_products = any(indicator in response for indicator in ['üõçÔ∏è', 'üíé', '‚ÇΩ', '–ù–∞–π–¥–µ–Ω–æ'])
                
                print(f"–û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–≤–∞—Ä—ã: {'‚úÖ –î–∞' if has_products else '‚ùå –ù–µ—Ç'}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∞
                response_preview = response[:200] + "..." if len(response) > 200 else response
                print(f"–ü—Ä–µ–≤—å—é –æ—Ç–≤–µ—Ç–∞: {response_preview}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        
        print("\n‚úÖ –¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ò–ò –∑–∞–≤–µ—Ä—à–µ–Ω—ã")


async def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞")
    print("=" * 60)
    
    try:
        test_suite = TestSemanticSearch()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å OpenAI API
        if not os.getenv("OPENAI_API_KEY"):
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç OPENAI_API_KEY")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ú–æ–π–°–∫–ª–∞–¥ API  
        if not os.getenv("MOYSKLAD_TOKEN"):
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç MOYSKLAD_TOKEN")
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –ø–æ—Ä–æ–≥–æ–≤ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç)
        print("\n1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ—Ä–æ–≥–æ–≤ —Å—Ö–æ–¥—Å—Ç–≤–∞...")
        test_suite.test_threshold_calculation()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        embeddings_manager = EmbeddingsManager("data/test_embeddings.db")
        product_manager = ProductManager()
        ai_consultant = AmberAIConsultant()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
        await test_suite.test_embeddings_generation(embeddings_manager)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
        print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
        await test_suite.test_semantic_search_quality(product_manager)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–º–Ω—ã–π –ø–æ–∏—Å–∫
        print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
        await test_suite.test_smart_search_fallback(product_manager)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –ò–ò
        print("\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ò–ò...")
        await test_suite.test_ai_integration(ai_consultant)
        
        print("\n" + "=" * 60)
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        app_logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")


if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    os.makedirs("data", exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    asyncio.run(run_all_tests())