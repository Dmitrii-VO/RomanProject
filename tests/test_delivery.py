#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏
"""
import asyncio
import pytest
import os
import sys
from typing import List, Dict

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from src.delivery.russian_post_client import RussianPostClient
from src.catalog.product_manager import ProductManager
from utils.logger import app_logger


class TestDeliverySystem:
    """–¢–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∞–≤–∫–∏"""
    
    @pytest.fixture
    def delivery_client(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è RussianPostClient"""
        return RussianPostClient()
    
    @pytest.fixture
    def product_manager(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è ProductManager"""
        return ProductManager()
    
    def test_postcode_validation(self, delivery_client):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ—á—Ç–æ–≤—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤"""
        
        # –í–∞–ª–∏–¥–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
        valid_postcodes = ["101000", "190000", "344002", "630007", "690091"]
        for postcode in valid_postcodes:
            assert delivery_client._is_valid_postcode(postcode), f"–ò–Ω–¥–µ–∫—Å {postcode} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º"
        
        # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
        invalid_postcodes = [
            "000000",  # –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0
            "12345",   # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
            "1234567", # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            "12345a",  # –°–æ–¥–µ—Ä–∂–∏—Ç –±—É–∫–≤—ã
            "",        # –ü—É—Å—Ç–æ–π
            None,      # None
            "101 000", # –°–æ –ø—Ä–æ–±–µ–ª–æ–º
        ]
        for postcode in invalid_postcodes:
            assert not delivery_client._is_valid_postcode(postcode), f"–ò–Ω–¥–µ–∫—Å {postcode} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º"
        
        print("‚úÖ –¢–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ—á—Ç–æ–≤—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã")
    
    async def test_delivery_calculation_mock(self, delivery_client):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)"""
        
        test_cases = [
            {"postcode": "101000", "description": "–ú–æ—Å–∫–≤–∞"},
            {"postcode": "190000", "description": "–°–ü–±"},
            {"postcode": "344002", "description": "–†–æ—Å—Ç–æ–≤ (–º–µ—Å—Ç–Ω—ã–π)"},
            {"postcode": "630007", "description": "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"},
            {"postcode": "999999", "description": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω"}
        ]
        
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:")
        
        for case in test_cases:
            postcode = case["postcode"]
            description = case["description"]
            
            print(f"\n--- {description} ({postcode}) ---")
            
            delivery_info = await delivery_client.calculate_delivery_cost(postcode)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            assert "success" in delivery_info
            assert "cost" in delivery_info
            assert "delivery_time" in delivery_info
            
            if delivery_info["success"]:
                assert delivery_info["cost"] > 0, "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"
                assert delivery_info["delivery_time"] > 0, "–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0"
                assert "service_name" in delivery_info
                assert "delivery_date" in delivery_info
                
                print(f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {delivery_info['cost']}‚ÇΩ")
                print(f"–°—Ä–æ–∫: {delivery_info['delivery_time']} –¥–Ω–µ–π")
                print(f"–î–∞—Ç–∞: {delivery_info['delivery_date']}")
                print(f"–°–µ—Ä–≤–∏—Å: {delivery_info['service_name']}")
            else:
                print(f"–û—à–∏–±–∫–∞: {delivery_info.get('error')}")
        
        print("\n‚úÖ –¢–µ—Å—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")
    
    async def test_delivery_with_products(self, product_manager):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ —Å —É—á–µ—Ç–æ–º —Ç–æ–≤–∞—Ä–æ–≤"""
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
        test_products = [
            {
                "id": "test_ring_1",
                "name": "–ö–æ–ª—å—Ü–æ —Å —è–Ω—Ç–∞—Ä–µ–º",
                "category": "–∫–æ–ª—å—Ü–∞",
                "price": 2500,
                "quantity": 1
            },
            {
                "id": "test_earrings_1", 
                "name": "–°–µ—Ä—å–≥–∏ —è–Ω—Ç–∞—Ä–Ω—ã–µ",
                "category": "—Å–µ—Ä—å–≥–∏",
                "price": 3200,
                "quantity": 1
            }
        ]
        
        postcode = "101000"  # –ú–æ—Å–∫–≤–∞
        
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏:")
        print(f"–¢–æ–≤–∞—Ä—ã: {len(test_products)} —à—Ç.")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        total_weight = product_manager._calculate_total_weight(test_products)
        total_value = product_manager._calculate_total_value(test_products)
        
        print(f"–û–±—â–∏–π –≤–µ—Å: {total_weight}–≥")
        print(f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_value}‚ÇΩ")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É
        delivery_info = await product_manager.calculate_delivery_cost(postcode, test_products)
        
        assert delivery_info["success"], "–†–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
        assert delivery_info["cost"] > 0, "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        formatted_info = product_manager.format_delivery_info_with_products(delivery_info, test_products)
        
        print(f"\n–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        print(formatted_info)
        
        print("\n‚úÖ –¢–µ—Å—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")
    
    def test_postcode_parsing(self, product_manager):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        
        test_texts = [
            ("–ú–æ–π –∏–Ω–¥–µ–∫—Å 101000", "101000"),
            ("–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ 344002 –ø–æ–∂–∞–ª—É–π—Å—Ç–∞", "344002"),
            ("–ñ–∏–≤—É –≤ –≥–æ—Ä–æ–¥–µ —Å –∏–Ω–¥–µ–∫—Å–æ–º 630007", "630007"),
            ("–ë–µ–∑ –∏–Ω–¥–µ–∫—Å–∞", None),
            ("000000 –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π", None),
            ("–ò–Ω–¥–µ–∫—Å 12345 –∫–æ—Ä–æ—Ç–∫–∏–π", None),
            ("–ù–µ—Å–∫–æ–ª—å–∫–æ 101000 –∏ 190000 –∏–Ω–¥–µ–∫—Å–æ–≤", "101000")  # –ë–µ—Ä–µ—Ç –ø–µ—Ä–≤—ã–π
        ]
        
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–Ω–¥–µ–∫—Å–æ–≤:")
        
        for text, expected in test_texts:
            result = product_manager.parse_postcode_from_text(text)
            print(f"'{text[:30]}...' ‚Üí {result}")
            assert result == expected, f"–û–∂–∏–¥–∞–ª—Å—è {expected}, –ø–æ–ª—É—á–µ–Ω {result}"
        
        print("\n‚úÖ –¢–µ—Å—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã")
    
    async def test_delivery_options(self, product_manager):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏"""
        
        postcode = "344002"  # –†–æ—Å—Ç–æ–≤
        
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏:")
        
        options = await product_manager.get_delivery_options(postcode)
        
        assert isinstance(options, list), "–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫"
        
        if options:
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(options)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
            
            for i, option in enumerate(options, 1):
                print(f"\n{i}. {option['name']}")
                print(f"   –¢–∏–ø: {option['type']}")
                print(f"   –°—Ç–æ–∏–º–æ—Å—Ç—å: {option['cost']}‚ÇΩ")
                print(f"   –°—Ä–æ–∫: {option['delivery_time']} –¥–Ω–µ–π")
                print(f"   –î–∞—Ç–∞: {option['delivery_date']}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–ø—Ü–∏–∏
                assert "type" in option
                assert "name" in option
                assert "cost" in option
                assert "delivery_time" in option
                assert option["cost"] > 0
                assert option["delivery_time"] > 0
        else:
            print("–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        print("\n‚úÖ –¢–µ—Å—Ç—ã –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")
    
    def test_weight_calculation(self, product_manager):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å—á–µ—Ç –≤–µ—Å–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
        
        test_products = [
            {
                "name": "–ö–æ–ª—å—Ü–æ",
                "category": "–∫–æ–ª—å—Ü–∞",
                "quantity": 2
            },
            {
                "name": "–°–µ—Ä—å–≥–∏",
                "category": "—Å–µ—Ä—å–≥–∏", 
                "quantity": 1
            },
            {
                "name": "–ë—Ä–∞—Å–ª–µ—Ç",
                "category": "–±—Ä–∞—Å–ª–µ—Ç—ã",
                "quantity": 1
            }
        ]
        
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –≤–µ—Å–∞:")
        
        # –û–∂–∏–¥–∞–µ–º—ã–π –≤–µ—Å: 2*15 (–∫–æ–ª—å—Ü–∞) + 1*25 (—Å–µ—Ä—å–≥–∏) + 1*40 (–±—Ä–∞—Å–ª–µ—Ç—ã) + —É–ø–∞–∫–æ–≤–∫–∞ (20 + 3*5)
        # = 30 + 25 + 40 + 35 = 130–≥
        expected_weight = 130
        
        actual_weight = product_manager._calculate_total_weight(test_products)
        
        print(f"–¢–æ–≤–∞—Ä—ã: {len(test_products)} –ø–æ–∑–∏—Ü–∏–π")
        print(f"–û–∂–∏–¥–∞–µ–º—ã–π –≤–µ—Å: {expected_weight}–≥")
        print(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –≤–µ—Å: {actual_weight}–≥")
        
        assert actual_weight == expected_weight, f"–í–µ—Å {actual_weight}–≥ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º {expected_weight}–≥"
        
        # –¢–µ—Å—Ç –±–µ–∑ —Ç–æ–≤–∞—Ä–æ–≤
        empty_weight = product_manager._calculate_total_weight([])
        assert empty_weight == 50, "–ë–µ–∑ —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 50–≥"
        
        print("\n‚úÖ –¢–µ—Å—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –≤–µ—Å–∞ –ø—Ä–æ–π–¥–µ–Ω—ã")


async def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∞–≤–∫–∏")
    print("=" * 60)
    
    try:
        test_suite = TestDeliverySystem()
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Å—Ç—É—Ä—ã
        delivery_client = RussianPostClient()
        product_manager = ProductManager()
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        print("\n1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤...")
        test_suite.test_postcode_validation(delivery_client)
        
        print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–Ω–¥–µ–∫—Å–æ–≤...")
        test_suite.test_postcode_parsing(product_manager)
        
        print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –≤–µ—Å–∞...")
        test_suite.test_weight_calculation(product_manager)
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏...")
        await test_suite.test_delivery_calculation_mock(delivery_client)
        
        print("\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏...")
        await test_suite.test_delivery_with_products(product_manager)
        
        print("\n6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏...")
        await test_suite.test_delivery_options(product_manager)
        
        print("\n" + "=" * 60)
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¢–µ—Å—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∑–∞–≥–ª—É—à–∫–∏ API.")
        print("   –ü—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è:")
        print("   ‚Ä¢ API –∫–ª—é—á–∏ –ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏")
        print("   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        print("   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤")
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        app_logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    asyncio.run(run_all_tests())