#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ —è–Ω—Ç–∞—Ä–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
"""
import asyncio
import os
from dotenv import load_dotenv

from utils.logger import app_logger
from src.bot.telegram_client import AmberTelegramClient
from src.ai.consultant_v2 import AmberAIConsultantV2


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    app_logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ —è–Ω—Ç–∞—Ä–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    api_id = int(os.getenv("TELEGRAM_API_ID"))
    api_hash = os.getenv("TELEGRAM_API_HASH")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
    app_logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    
    # –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç v2 —Å –ø–æ–ª–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π
    ai_consultant = AmberAIConsultantV2()
    
    # Telegram –∫–ª–∏–µ–Ω—Ç
    telegram_client = AmberTelegramClient(api_id, api_hash)
    
    try:
        # –ó–∞–ø—É—Å–∫ Telegram –∫–ª–∏–µ–Ω—Ç–∞
        app_logger.info("–ó–∞–ø—É—Å–∫ Telegram –∫–ª–∏–µ–Ω—Ç–∞...")
        await telegram_client.start_client()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        from telethon import events
        @telegram_client.client.on(events.NewMessage)
        async def handle_new_message(event):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
            try:
                user_id = event.sender_id
                message_text = event.message.text
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                from utils.logger import log_conversation
                log_conversation(user_id, "user_message", message_text)
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ò–ò —Å –ø–µ—Ä–µ–¥–∞—á–µ–π user_id –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                ai_response = await ai_consultant.process_message(user_id, message_text)
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò (v2 —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É —ç—Å–∫–∞–ª–∞—Ü–∏–∏)
                await event.respond(ai_response)
                log_conversation(user_id, "bot_response", ai_response)
                app_logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
            except Exception as e:
                app_logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                error_message = ("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. "
                               "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É.")
                await event.respond(error_message)
                log_conversation(user_id, "bot_response", error_message)
        
        app_logger.info("üéâ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        app_logger.info("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        # –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        await telegram_client.client.run_until_disconnected()
        
    except KeyboardInterrupt:
        app_logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    except Exception as e:
        app_logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
        app_logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –∫–ª–∏–µ–Ω—Ç–∞...")
        await telegram_client.stop_client()
        
        app_logger.info("üëã –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(1)