#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å AmoCRM
"""
import asyncio
import os
from dotenv import load_dotenv

from utils.logger import setup_logger, app_logger
from src.integrations.amocrm_client import AmoCRMClient
from src.integrations.token_manager import TokenManager


async def test_token_manager():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–æ–∫–µ–Ω–æ–≤"""
    print("\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TokenManager...")
    
    token_manager = TokenManager()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–æ–≤
    status = token_manager.get_token_status()
    print(f"üìä –°—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–æ–≤: {status}")
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö —Å—Ç–∞—Ç—É—Å
    if status.get('amocrm', {}).get('has_tokens'):
        access_token = token_manager.get_amocrm_access_token()
        refresh_token = token_manager.get_amocrm_refresh_token()
        is_expired = token_manager.is_amocrm_token_expired()
        
        print(f"‚úÖ Access token: {'‚úì' if access_token else '‚úó'}")
        print(f"‚úÖ Refresh token: {'‚úì' if refresh_token else '‚úó'}")
        print(f"‚è∞ –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫: {'–î–∞' if is_expired else '–ù–µ—Ç'}")
    else:
        print("‚ùå –¢–æ–∫–µ–Ω—ã AmoCRM –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")


async def test_amocrm_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AmoCRM"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AmoCRM...")
    
    client = AmoCRMClient()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    if not client.access_token:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç access_token –¥–ª—è AmoCRM")
        print("üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
        return False
    
    print(f"‚úÖ Access token –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {client.access_token[:20]}...")
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    try:
        result = await client._make_request("GET", "account")
        if result:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AmoCRM —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –ê–∫–∫–∞—É–Ω—Ç: {result.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AmoCRM")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AmoCRM: {e}")
        return False


async def test_create_contact_and_lead():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏ —Å–¥–µ–ª–∫–∏"""
    print("\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏ —Å–¥–µ–ª–∫–∏...")
    
    client = AmoCRMClient()
    
    if not client.access_token:
        print("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_telegram_id = 999999999
    test_name = "–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç"
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∏ —Å–¥–µ–ª–∫—É
        contact_id, lead_id = await client.get_or_create_contact_and_lead(
            test_telegram_id, test_name
        )
        
        if contact_id and lead_id:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ç–∞–∫—Ç ID: {contact_id}")
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–¥–µ–ª–∫–∞ ID: {lead_id}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
            await client.add_note_to_lead(
                lead_id, 
                "ü§ñ –¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –æ—Ç –±–æ—Ç–∞\n–≠—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram"
            )
            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ —Å–¥–µ–ª–∫–µ")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏
            await client.log_conversation(
                test_telegram_id,
                "–ü—Ä–∏–≤–µ—Ç! –•–æ—á—É –∫—É–ø–∏—Ç—å —è–Ω—Ç–∞—Ä–Ω—ã–µ —É–∫—Ä–∞—à–µ–Ω–∏—è",
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –†–∞–¥–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ. –ö–∞–∫–∏–µ —É–∫—Ä–∞—à–µ–Ω–∏—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?"
            )
            print("‚úÖ –ü–µ—Ä–µ–ø–∏—Å–∫–∞ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞ –≤ AmoCRM")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            await client.escalate_to_manager(
                test_telegram_id, 
                "–¢–µ—Å—Ç–æ–≤–∞—è —ç—Å–∫–∞–ª–∞—Ü–∏—è –æ—Ç –±–æ—Ç–∞"
            )
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
            
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–ª–∏ —Å–¥–µ–ª–∫–∏")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
        return False


async def test_full_integration():
    """–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("\nüîÑ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AmoCRM...\n")
    
    success_count = 0
    total_tests = 3
    
    # –¢–µ—Å—Ç 1: TokenManager
    try:
        await test_token_manager()
        success_count += 1
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TokenManager: {e}")
    
    # –¢–µ—Å—Ç 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AmoCRM
    try:
        if await test_amocrm_connection():
            success_count += 1
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    
    # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏ —Å–¥–µ–ª–∫–∏
    try:
        if await test_create_contact_and_lead():
            success_count += 1
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π: {e}")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}/{total_tests}")
    
    if success_count == total_tests:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AmoCRM —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ç–æ–∫–µ–Ω—ã AmoCRM")


def setup_oauth_instructions():
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ OAuth –¥–ª—è AmoCRM"""
    print("\nüîß –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ AmoCRM OAuth:\n")
    
    print("1. –ó–∞–π–¥–∏—Ç–µ –≤ –∞–ºoCRM -> –ù–∞—Å—Ç—Ä–æ–π–∫–∏ -> –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ -> –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º")
    print("2. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∞–º–∏:")
    print("   - –ö–æ–Ω—Ç–∞–∫—Ç—ã: —Å–æ–∑–¥–∞–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø—Ä–æ—Å–º–æ—Ç—Ä")
    print("   - –°–¥–µ–ª–∫–∏: —Å–æ–∑–¥–∞–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø—Ä–æ—Å–º–æ—Ç—Ä")
    print("   - –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: —Å–æ–∑–¥–∞–Ω–∏–µ, –ø—Ä–æ—Å–º–æ—Ç—Ä")
    print("   - –ó–∞–¥–∞—á–∏: —Å–æ–∑–¥–∞–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    print("\n3. –ü–æ–ª—É—á–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
    print("   - Client ID")
    print("   - Client Secret")
    print("   - Redirect URI")
    
    print("\n4. –û–±–Ω–æ–≤–∏—Ç–µ .env —Ñ–∞–π–ª:")
    print("   AMOCRM_CLIENT_ID=–≤–∞—à_client_id")
    print("   AMOCRM_CLIENT_SECRET=–≤–∞—à_client_secret")
    print("   AMOCRM_REDIRECT_URI=https://amberry.ru/callback")
    print("   AMOCRM_SUBDOMAIN=–≤–∞—à_–ø–æ–¥–¥–æ–º–µ–Ω")
    
    print("\n5. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ URL:")
    client_id = os.getenv("AMOCRM_CLIENT_ID", "–≤–∞—à_client_id")
    subdomain = os.getenv("AMOCRM_SUBDOMAIN", "–≤–∞—à_–ø–æ–¥–¥–æ–º–µ–Ω")
    redirect_uri = os.getenv("AMOCRM_REDIRECT_URI", "https://amberry.ru/callback")
    
    oauth_url = (
        f"https://{subdomain}.amocrm.ru/oauth2/authorize"
        f"?client_id={client_id}"
        f"&response_type=code"
        f"&redirect_uri={redirect_uri}"
        f"&scope=crm"
    )
    
    print(f"OAuth URL: {oauth_url}")
    
    print("\n6. –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –æ–±–º–µ–Ω–∏—Ç–µ –µ–≥–æ –Ω–∞ —Ç–æ–∫–µ–Ω—ã —á–µ—Ä–µ–∑ API")
    print("   –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://www.amocrm.ru/developers/content/oauth/step-by-step")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logger()
    
    app_logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AmoCRM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å AmoCRM")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    required_vars = ["AMOCRM_SUBDOMAIN", "AMOCRM_CLIENT_ID", "AMOCRM_CLIENT_SECRET"]
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        setup_oauth_instructions()
        return
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await test_full_integration()
    
    app_logger.info("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AmoCRM –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(1)