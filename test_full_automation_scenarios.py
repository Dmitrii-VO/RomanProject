#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:
–∑–∞–ø—Ä–æ—Å ‚Üí —É—Ç–æ—á–Ω–µ–Ω–∏–µ ‚Üí –ø–æ–¥–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ ‚Üí –∑–∞–∫–∞–∑ ‚Üí –¥–æ—Å—Ç–∞–≤–∫–∞ ‚Üí —Å—á–µ—Ç ‚Üí –æ–ø–ª–∞—Ç–∞ ‚Üí CRM

4 —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è:
1. –ó–∞–∫–∞–∑ < 15000‚ÇΩ (–¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º)
2. –ó–∞–∫–∞–∑ ‚â• 15000‚ÇΩ (–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞)  
3. –û–±—â–∏–π –∑–∞–ø—Ä–æ—Å (—Ç—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏–π)
4. –°—Ü–µ–Ω–∞—Ä–∏–π —Å –æ—à–∏–±–∫–æ–π (–æ—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞)
"""
import asyncio
import sys
import os
import json
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.ai.consultant_v2 import AmberAIConsultantV2
from utils.logger import app_logger


class FullAutomationTester:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ –ø–æ–ª–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.consultant = AmberAIConsultantV2()
        self.test_results = {
            "scenarios": [],
            "total_passed": 0,
            "total_failed": 0
        }
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ê–Ω–Ω—ã –ò–≤–∞–Ω–æ–≤–æ–π
        self.test_user = {
            "id": 987654321,
            "name": "–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞", 
            "phone": "+7 900 123 45 67",
            "email": "anna.ivanova@test.com",
            "postal_code": "190000"  # –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥
        }
    
    async def run_all_scenarios(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ 4 —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏\n")
        print(f"üë§ –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç: {self.test_user['name']} (ID: {self.test_user['id']})\n")
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ó–∞–∫–∞–∑ < 15000‚ÇΩ
        await self._test_scenario_1_small_order()
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ó–∞–∫–∞–∑ ‚â• 15000‚ÇΩ
        await self._test_scenario_2_large_order() 
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π 3: –û–±—â–∏–π –∑–∞–ø—Ä–æ—Å
        await self._test_scenario_3_general_inquiry()
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π 4: –û—à–∏–±–∫–∞/–æ—Ç–º–µ–Ω–∞
        await self._test_scenario_4_cancellation()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self._print_final_results()
    
    async def _test_scenario_1_small_order(self):
        """–°—Ü–µ–Ω–∞—Ä–∏–π 1: –ó–∞–∫–∞–∑ < 15000‚ÇΩ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º"""
        scenario_name = "–°—Ü–µ–Ω–∞—Ä–∏–π 1: –ó–∞–∫–∞–∑ < 15000‚ÇΩ"
        print(f"üß™ {scenario_name}")
        print("=" * 50)
        
        user_id = self.test_user["id"] + 1  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
        
        try:
            # –®–∞–≥ 1: –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫–∞–∑ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞
            request_message = "–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –∫–æ–ª—å—Ü–æ –∑–∞ 8000 —Ä—É–±–ª–µ–π"
            print(f"üë§ –ö–ª–∏–µ–Ω—Ç: {request_message}")
            
            response1 = await self.consultant.process_message(user_id, request_message)
            print(f"ü§ñ –ë–æ—Ç: {response1[:200]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
            if not any(word in response1.lower() for word in ['–∑–∞–∫–∞–∑', '–æ—Ñ–æ—Ä–º', '–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å']):
                raise AssertionError("–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")
            
            # –®–∞–≥ 2: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–∫–∞–∑
            confirmation = "‚úÖ –ù–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"
            print(f"üë§ –ö–ª–∏–µ–Ω—Ç: {confirmation}")
            
            response2 = await self.consultant.process_message(user_id, confirmation)
            print(f"ü§ñ –ë–æ—Ç: {response2[:200]}...")
            
            # –û–∂–∏–¥–∞–µ–º –ø–æ–∫–∞–∑ —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if "—Ç–æ–≤–∞—Ä" in response2.lower() or "–≤—ã–±–µ—Ä–∏—Ç–µ" in response2.lower():
                # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–≤–∞—Ä
                selection = "1"
                print(f"üë§ –ö–ª–∏–µ–Ω—Ç: {selection}")
                
                response3 = await self.consultant.process_message(user_id, selection)
                print(f"ü§ñ –ë–æ—Ç: {response3[:200]}...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                if "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑" in response3.lower():
                    # –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                    final_confirmation = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑"
                    print(f"üë§ –ö–ª–∏–µ–Ω—Ç: {final_confirmation}")
                    
                    response4 = await self.consultant.process_message(user_id, final_confirmation)
                    print(f"ü§ñ –ë–æ—Ç: {response4[:200]}...")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
                    success = "–∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ" in response4.lower() or "–æ—Ñ–æ—Ä–º–ª–µ–Ω" in response4.lower()
                    
            # –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
            delivery_check = "–ø–æ —Ç–∞—Ä–∏—Ñ–∞–º" in (response2 + response3).lower() if 'response3' in locals() else False
            
            self._record_scenario_result(scenario_name, True, {
                "order_intent_detected": True,
                "products_shown": "—Ç–æ–≤–∞—Ä" in response2.lower(),
                "delivery_by_tariffs": delivery_check,
                "order_created": success if 'success' in locals() else False
            })
            
            print(f"‚úÖ {scenario_name}: –ü–†–û–ô–î–ï–ù\n")
            
        except Exception as e:
            print(f"‚ùå {scenario_name}: –ü–†–û–í–ê–õ–ï–ù - {e}\n")
            self._record_scenario_result(scenario_name, False, {"error": str(e)})
    
    async def _test_scenario_2_large_order(self):
        """–°—Ü–µ–Ω–∞—Ä–∏–π 2: –ó–∞–∫–∞–∑ ‚â• 15000‚ÇΩ —Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–æ–π"""
        scenario_name = "–°—Ü–µ–Ω–∞—Ä–∏–π 2: –ó–∞–∫–∞–∑ ‚â• 15000‚ÇΩ"
        print(f"üß™ {scenario_name}")
        print("=" * 50)
        
        user_id = self.test_user["id"] + 2
        
        try:
            # –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Ä–æ–≥–æ–π —Ç–æ–≤–∞—Ä
            request_message = "–ü–æ–∫–∞–∂–∏—Ç–µ –±—É—Å—ã –∑–∞ 16000 —Ä—É–±–ª–µ–π"
            print(f"üë§ –ö–ª–∏–µ–Ω—Ç: {request_message}")
            
            response1 = await self.consultant.process_message(user_id, request_message)
            print(f"ü§ñ –ë–æ—Ç: {response1[:200]}...")
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
            if "–∑–∞–∫–∞–∑" in response1.lower():
                confirmation = "‚úÖ –ù–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"
                print(f"üë§ –ö–ª–∏–µ–Ω—Ç: {confirmation}")
                
                response2 = await self.consultant.process_message(user_id, confirmation)
                print(f"ü§ñ –ë–æ—Ç: {response2[:200]}...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É
                free_delivery = "–±–µ—Å–ø–ª–∞—Ç–Ω" in response2.lower() or "üéÅ" in response2
                
                self._record_scenario_result(scenario_name, True, {
                    "high_value_detected": True,
                    "free_delivery_offered": free_delivery
                })
                
                print(f"‚úÖ {scenario_name}: –ü–†–û–ô–î–ï–ù (–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞: {free_delivery})\n")
            else:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ - —Ç–æ–∂–µ –≤–∞–ª–∏–¥–Ω–æ
                self._record_scenario_result(scenario_name, True, {
                    "standard_processing": True
                })
                print(f"‚úÖ {scenario_name}: –ü–†–û–ô–î–ï–ù (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞)\n")
            
        except Exception as e:
            print(f"‚ùå {scenario_name}: –ü–†–û–í–ê–õ–ï–ù - {e}\n")
            self._record_scenario_result(scenario_name, False, {"error": str(e)})
    
    async def _test_scenario_3_general_inquiry(self):
        """–°—Ü–µ–Ω–∞—Ä–∏–π 3: –û–±—â–∏–π –∑–∞–ø—Ä–æ—Å —Ç—Ä–µ–±—É—é—â–∏–π —É—Ç–æ—á–Ω–µ–Ω–∏–π"""
        scenario_name = "–°—Ü–µ–Ω–∞—Ä–∏–π 3: –û–±—â–∏–π –∑–∞–ø—Ä–æ—Å"
        print(f"üß™ {scenario_name}")
        print("=" * 50)
        
        user_id = self.test_user["id"] + 3
        
        try:
            # –û–±—â–∏–π –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            request_message = "–•–æ—á—É —á—Ç–æ-—Ç–æ –∫—Ä–∞—Å–∏–≤–æ–µ –∏–∑ —è–Ω—Ç–∞—Ä—è"
            print(f"üë§ –ö–ª–∏–µ–Ω—Ç: {request_message}")
            
            response1 = await self.consultant.process_message(user_id, request_message)
            print(f"ü§ñ –ë–æ—Ç: {response1[:200]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –ª–∏–±–æ:
            # 1. –ü–æ–∫–∞–∑–∞–ª–∞ —Ç–æ–≤–∞—Ä—ã (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞)
            # 2. –ó–∞–ø—É—Å—Ç–∏–ª–∞ —Å—Ü–µ–Ω–∞—Ä–∏–π —É—Ç–æ—á–Ω–µ–Ω–∏–π
            
            clarification_requested = any(word in response1.lower() for word in [
                '–∫–∞–∫–æ–π', '—Ç–∏–ø', '–±—é–¥–∂–µ—Ç', '—É—Ç–æ—á–Ω', '–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'
            ])
            
            products_shown = '—Ç–æ–≤–∞—Ä' in response1.lower()
            
            if clarification_requested:
                # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ
                clarification = "–ë—Ä–∞—Å–ª–µ—Ç—ã –¥–æ 5000 —Ä—É–±–ª–µ–π"
                print(f"üë§ –ö–ª–∏–µ–Ω—Ç: {clarification}")
                
                response2 = await self.consultant.process_message(user_id, clarification)
                print(f"ü§ñ –ë–æ—Ç: {response2[:200]}...")
                
            self._record_scenario_result(scenario_name, True, {
                "clarification_requested": clarification_requested,
                "products_shown": products_shown,
                "adaptive_processing": True
            })
            
            print(f"‚úÖ {scenario_name}: –ü–†–û–ô–î–ï–ù (–∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞)\n")
            
        except Exception as e:
            print(f"‚ùå {scenario_name}: –ü–†–û–í–ê–õ–ï–ù - {e}\n")
            self._record_scenario_result(scenario_name, False, {"error": str(e)})
    
    async def _test_scenario_4_cancellation(self):
        """–°—Ü–µ–Ω–∞—Ä–∏–π 4: –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞"""
        scenario_name = "–°—Ü–µ–Ω–∞—Ä–∏–π 4: –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞"
        print(f"üß™ {scenario_name}")
        print("=" * 50)
        
        user_id = self.test_user["id"] + 4
        
        try:
            # –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–∫–∞–∑
            request_message = "–•–æ—á—É –∫—É–ø–∏—Ç—å —Å–µ—Ä—å–≥–∏"
            print(f"üë§ –ö–ª–∏–µ–Ω—Ç: {request_message}")
            
            response1 = await self.consultant.process_message(user_id, request_message)
            print(f"ü§ñ –ë–æ—Ç: {response1[:200]}...")
            
            # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
            cancellation = "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"
            print(f"üë§ –ö–ª–∏–µ–Ω—Ç: {cancellation}")
            
            response2 = await self.consultant.process_message(user_id, cancellation)
            print(f"ü§ñ –ë–æ—Ç: {response2[:200]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω
            cancellation_confirmed = any(word in response2.lower() for word in [
                '–æ—Ç–º–µ–Ω–µ–Ω', '–æ—Ç–º–µ–Ω–∏—Ç—å', '–æ—Ç–º–µ–Ω–∞', '—Ö–æ—Ä–æ—à–æ'
            ])
            
            self._record_scenario_result(scenario_name, True, {
                "cancellation_handled": cancellation_confirmed
            })
            
            print(f"‚úÖ {scenario_name}: –ü–†–û–ô–î–ï–ù (–æ—Ç–º–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞)\n")
            
        except Exception as e:
            print(f"‚ùå {scenario_name}: –ü–†–û–í–ê–õ–ï–ù - {e}\n")
            self._record_scenario_result(scenario_name, False, {"error": str(e)})
    
    def _record_scenario_result(self, scenario_name: str, passed: bool, details: dict):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        self.test_results["scenarios"].append({
            "name": scenario_name,
            "passed": passed,
            "details": details
        })
        
        if passed:
            self.test_results["total_passed"] += 1
        else:
            self.test_results["total_failed"] += 1
    
    def _print_final_results(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)
        
        for scenario in self.test_results["scenarios"]:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if scenario["passed"] else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"{scenario['name']}: {status}")
            
            if not scenario["passed"] and "error" in scenario["details"]:
                print(f"   –û—à–∏–±–∫–∞: {scenario['details']['error']}")
            elif scenario["passed"]:
                key_features = []
                details = scenario["details"]
                
                if details.get("order_intent_detected"):
                    key_features.append("–Ω–∞–º–µ—Ä–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ")
                if details.get("free_delivery_offered"):
                    key_features.append("–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞")
                if details.get("delivery_by_tariffs"):
                    key_features.append("–¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º")
                if details.get("products_shown"):
                    key_features.append("—Ç–æ–≤–∞—Ä—ã –ø–æ–∫–∞–∑–∞–Ω—ã")
                if details.get("adaptive_processing"):
                    key_features.append("–∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
                if details.get("cancellation_handled"):
                    key_features.append("–æ—Ç–º–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
                
                if key_features:
                    print(f"   –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: {', '.join(key_features)}")
        
        print("-" * 60)
        print(f"üìà –í—Å–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {len(self.test_results['scenarios'])}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {self.test_results['total_passed']}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.test_results['total_failed']}")
        
        success_rate = (self.test_results['total_passed'] / len(self.test_results['scenarios'])) * 100
        print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        if success_rate >= 75:
            print(f"\nüéâ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥–µ–∂–Ω–æ.")
        elif success_rate >= 50:
            print(f"\n‚úÖ –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –Ω–µ–¥–æ—á–µ—Ç–∞–º–∏.")
        else:
            print(f"\n‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê! –ú–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–ª–æ–≤ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
        self._save_results_to_file()
    
    def _save_results_to_file(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª"""
        try:
            with open("test_automation_results.json", "w", encoding="utf-8") as f:
                json.dump(self.test_results, f, ensure_ascii=False, indent=2)
            print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ test_automation_results.json")
        except Exception as e:
            print(f"\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {e}")


async def run_integration_tests():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    tester = FullAutomationTester()
    await tester.run_all_scenarios()


if __name__ == "__main__":
    print("üî• –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤")
    print("üìã –¢–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è: –∑–∞–ø—Ä–æ—Å ‚Üí —É—Ç–æ—á–Ω–µ–Ω–∏–µ ‚Üí –ø–æ–¥–±–æ—Ä ‚Üí –∑–∞–∫–∞–∑ ‚Üí –¥–æ—Å—Ç–∞–≤–∫–∞ ‚Üí –æ–ø–ª–∞—Ç–∞ ‚Üí CRM")
    print("üë§ –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç: –ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞")
    print("üß™ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: 4\n")
    
    asyncio.run(run_integration_tests())