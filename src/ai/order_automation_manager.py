"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤ - –ø–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –æ—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–æ –æ–ø–ª–∞—Ç—ã
"""
import re
import asyncio
from typing import Dict, Optional, List, Tuple, Any
from datetime import datetime
from utils.logger import app_logger
from src.catalog.product_manager import ProductManager


class OrderAutomationManager:
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—ã–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞:
    –∑–∞–ø—Ä–æ—Å ‚Üí —É—Ç–æ—á–Ω–µ–Ω–∏–µ ‚Üí –ø–æ–¥–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ ‚Üí –∑–∞–∫–∞–∑ –≤ –ú–æ–π–°–∫–ª–∞–¥ ‚Üí –¥–æ—Å—Ç–∞–≤–∫–∞ ‚Üí —Å—á–µ—Ç ‚Üí –æ–ø–ª–∞—Ç–∞ ‚Üí CRM
    """
    
    def __init__(self, product_manager: ProductManager):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        self.product_manager = product_manager
        self.free_delivery_threshold = 15000.0  # –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç 15000‚ÇΩ
        
        app_logger.info("OrderAutomationManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def detect_order_intent(self, message: str) -> Dict[str, Any]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–º–µ—Ä–µ–Ω–∏–∏
        """
        message_lower = message.lower()
        
        # –¢—Ä–∏–≥–≥–µ—Ä—ã –∑–∞–∫–∞–∑–∞ (–∏—Å–∫–ª—é—á–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä)
        order_triggers = [
            '—Ö–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å', '—Ö–æ—á—É –∫—É–ø–∏—Ç—å', '–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏', '–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑',
            '–∑–∞–∫–∞–∑–∞—Ç—å', '–æ—Ñ–æ—Ä–º–ª—è—é', '–±–µ—Ä—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏'
        ]
        
        # –¢—Ä–∏–≥–≥–µ—Ä—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ (–ù–ï –∑–∞–∫–∞–∑–∞)
        view_triggers = [
            '–ø–æ–∫–∞–∂–∏', '–ø–æ–∫–∞–∂–∏—Ç–µ', '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å', '–∫–∞–∫–∏–µ –µ—Å—Ç—å', '—á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å',
            '–∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç', '–∫–∞—Ç–∞–ª–æ–≥', '—Ç–æ–≤–∞—Ä—ã', '–≤—ã–±—Ä–∞—Ç—å –∏–∑', '–ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ —á—Ç–æ',
            '—á—Ç–æ –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å', '–≤–∞—Ä–∏–∞–Ω—Ç—ã', '–ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ'
        ]
        
        # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ - –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
        has_view_intent = any(trigger in message_lower for trigger in view_triggers)
        if has_view_intent:
            return {"has_intent": False, "reason": "catalog_view_request"}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∑–∞–∫–∞–∑–∞
        has_order_intent = any(trigger in message_lower for trigger in order_triggers)
        
        if not has_order_intent:
            return {"has_intent": False}
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        extracted = self._extract_order_parameters(message)
        
        return {
            "has_intent": True,
            "confidence": 0.8 if any(trigger in message_lower for trigger in ['–∑–∞–∫–∞–∑–∞—Ç—å', '–∫—É–ø–∏—Ç—å']) else 0.6,
            "original_message": message,
            **extracted
        }
    
    def _extract_order_parameters(self, message: str) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–∫–∞–∑–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        params = {
            "budget": None,
            "product_type": None,
            "postal_code": None,
            "specific_product": None
        }
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –±—é–¥–∂–µ—Ç
        budget_patterns = [
            r'–∑–∞\s+(\d+(?:\s*\d+)*)\s*(?:—Ä—É–±|‚ÇΩ|—Ä—É–±–ª–µ–π?)',
            r'(\d+(?:\s*\d+)*)\s*(?:—Ä—É–±|‚ÇΩ|—Ä—É–±–ª–µ–π?)',
            r'–¥–æ\s+(\d+(?:\s*\d+)*)',
            r'–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö\s+(\d+(?:\s*\d+)*)',
            r'–±—é–¥–∂–µ—Ç\s+(\d+(?:\s*\d+)*)'
        ]
        
        for pattern in budget_patterns:
            match = re.search(pattern, message.lower())
            if match:
                budget_str = match.group(1).replace(' ', '')
                try:
                    params["budget"] = float(budget_str)
                    break
                except ValueError:
                    continue
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞
        product_types = {
            '–∫–æ–ª—å—Ü–æ': ['–∫–æ–ª—å—Ü–æ', '–∫–æ–ª—å—Ü–∞', '–∫–æ–ª–µ—á–∫–æ'],
            '–±—Ä–∞—Å–ª–µ—Ç': ['–±—Ä–∞—Å–ª–µ—Ç', '–±—Ä–∞—Å–ª–µ—Ç—ã'],
            '—Å–µ—Ä—å–≥–∏': ['—Å–µ—Ä—å–≥–∏', '—Å–µ—Ä–µ–∂–∫–∏', '—Å–µ—Ä—ë–∂–∫–∏'],
            '–±—É—Å—ã': ['–±—É—Å—ã', '–±—É—Å–∏–∫–∏'],
            '–ø–æ–¥–≤–µ—Å–∫–∞': ['–ø–æ–¥–≤–µ—Å–∫–∞', '–ø–æ–¥–≤–µ—Å–∫–∏', '–∫—É–ª–æ–Ω', '–∫—É–ª–æ–Ω—ã'],
            '–æ–∂–µ—Ä–µ–ª—å–µ': ['–æ–∂–µ—Ä–µ–ª—å–µ', '–æ–∂–µ—Ä–µ–ª—å—è']
        }
        
        message_lower = message.lower()
        for product_type, keywords in product_types.items():
            if any(keyword in message_lower for keyword in keywords):
                params["product_type"] = product_type
                break
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
        postal_match = re.search(r'\b(\d{6})\b', message)
        if postal_match:
            params["postal_code"] = postal_match.group(1)
        
        return params
    
    async def process_order_scenario(self, user_id: int, intent_data: Dict[str, Any], user_context: Dict = None) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–∫–∞–∑–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            intent_data: –î–∞–Ω–Ω—ã–µ –æ –Ω–∞–º–µ—Ä–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
            user_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω –∏ —Ç.–¥.)
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è
        """
        try:
            scenario_state = {
                "step": "confirmation",
                "user_id": user_id,
                "intent": intent_data,
                "context": user_context or {},
                "products": [],
                "missing_data": [],
                "total_amount": 0,
                "delivery_info": {},
                "confirmation_message": "",
                "next_action": "await_confirmation"
            }
            
            # –®–∞–≥ 1: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
            confirmation_response = await self._generate_order_confirmation(scenario_state)
            
            return {
                "success": True,
                "scenario_state": scenario_state,
                "response_message": confirmation_response,
                "next_action": "await_confirmation",
                "requires_user_input": True
            }
            
        except Exception as e:
            app_logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –∑–∞–∫–∞–∑–∞: {e}")
            return {
                "success": False,
                "error": str(e),
                "response_message": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            }
    
    async def _generate_order_confirmation(self, scenario_state: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
        intent = scenario_state["intent"]
        
        # –ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        message = "üõçÔ∏è –í–∏–∂—É, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑! "
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω–æ
        known_info = []
        if intent.get("product_type"):
            known_info.append(f"—Ç–æ–≤–∞—Ä: {intent['product_type']}")
        if intent.get("budget"):
            known_info.append(f"–±—é–¥–∂–µ—Ç: {int(intent['budget'])}‚ÇΩ")
        if intent.get("postal_code"):
            known_info.append(f"–¥–æ—Å—Ç–∞–≤–∫–∞: {intent['postal_code']}")
        
        if known_info:
            message += f"–Ø –ø–æ–Ω—è–ª: {', '.join(known_info)}.\n\n"
        else:
            message += "–î–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä–µ–º –¥–ª—è –≤–∞—Å –∏–¥–µ–∞–ª—å–Ω–æ–µ —É–∫—Ä–∞—à–µ–Ω–∏–µ!\n\n"
        
        message += "‚úÖ **–ù–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞?**\n"
        message += "üìã –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥\n"
        message += "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"
        
        return message
    
    async def process_confirmation_response(self, user_id: int, response: str, scenario_state: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
        response_lower = response.lower()
        
        if any(word in response_lower for word in ['–¥–∞', '–¥–∞–≤–∞–π—Ç–µ', '–Ω–∞—á–∞—Ç—å', '–æ—Ñ–æ—Ä–º–∏—Ç—å', '–∑–∞–∫–∞–∑', '‚úÖ', '–Ω–∞—á–∏–Ω–∞–µ–º']):
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–±–æ—Ä—É –¥–∞–Ω–Ω—ã—Ö
            return await self._start_data_collection(user_id, scenario_state)
        
        elif any(word in response_lower for word in ['–∫–∞—Ç–∞–ª–æ–≥', '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å', '–ø–æ–∫–∞–∑–∞—Ç—å', 'üìã']):
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥
            return await self._show_catalog_for_selection(scenario_state)
        
        elif any(word in response_lower for word in ['–Ω–µ—Ç', '–æ—Ç–º–µ–Ω–∏—Ç—å', '–æ—Ç–º–µ–Ω–∞', '‚ùå']):
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª
            return {
                "success": True,
                "scenario_completed": True,
                "response_message": "–•–æ—Ä–æ—à–æ, –µ—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –∑–∞–∫–∞–∑–∞—Ç—å - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ! –Ø –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å üòä",
                "next_action": "none"
            }
        
        else:
            # –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç - –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–µ–º
            return {
                "success": True,
                "scenario_state": scenario_state,
                "response_message": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:\n‚úÖ –ù–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞\nüìã –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥\n‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                "next_action": "await_confirmation",
                "requires_user_input": True
            }
    
    async def _show_catalog_for_selection(self, scenario_state: Dict[str, Any]) -> Dict[str, Any]:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
        intent = scenario_state["intent"]
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
            search_query = ""
            if intent.get("product_type"):
                search_query = intent["product_type"]
            else:
                search_query = "–≤—Å–µ —Ç–æ–≤–∞—Ä—ã"
            
            # –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ ProductManager
            products = await self.product_manager.search_products(
                query=search_query,
                budget_min=None,
                budget_max=intent.get("budget") if intent.get("budget") else None
            )
            
            if products:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
                products_text = self.product_manager.format_products_list(products, max_products=5)
                
                response = f"üõçÔ∏è **–¢–æ–≤–∞—Ä—ã –∏–∑ –Ω–∞—à–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞:**\n\n{products_text}\n\n"
                response += "üí° **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –∑–∞–∫–∞–∑–∞:**\n"
                response += "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: \"1\")\n"
                response += "‚Ä¢ –ò–ª–∏ —Å–∫–∞–∂–∏—Ç–µ \"–∑–∞–∫–∞–∑–∞—Ç—å [–Ω–∞–∑–≤–∞–Ω–∏–µ]\""
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤—ã–±–æ—Ä–∞
                scenario_state["available_products"] = products
                
                return {
                    "success": True,
                    "scenario_state": scenario_state,
                    "response_message": response,
                    "next_action": "select_product",
                    "requires_user_input": True
                }
            else:
                return {
                    "success": True,
                    "scenario_completed": True,
                    "response_message": "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.",
                    "next_action": "none"
                }
                
        except Exception as e:
            app_logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
            return {
                "success": True,
                "scenario_completed": True,
                "response_message": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!",
                "next_action": "none"
            }

    async def _start_data_collection(self, user_id: int, scenario_state: Dict[str, Any]) -> Dict[str, Any]:
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Å–±–æ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–∫–∞–∑–∞"""
        intent = scenario_state["intent"]
        missing_data = []
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å (–∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        if not intent.get("product_type") and not intent.get("specific_product"):
            missing_data.append("product_type")
        
        if not intent.get("budget"):
            missing_data.append("budget")
        
        # –ê–¥—Ä–µ—Å –Ω—É–∂–µ–Ω –Ω–µ —Å—Ä–∞–∑—É, –∑–∞–ø—Ä–æ—Å–∏–º –ø–æ—Å–ª–µ –ø–æ–¥–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤
        
        scenario_state["missing_data"] = missing_data
        scenario_state["step"] = "data_collection"
        
        if missing_data:
            question = await self._generate_data_collection_question(missing_data[0], scenario_state)
            return {
                "success": True,
                "scenario_state": scenario_state,
                "response_message": question,
                "next_action": f"collect_{missing_data[0]}",
                "requires_user_input": True
            }
        else:
            # –í—Å–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å - —Å—Ä–∞–∑—É –ø–æ–¥–±–∏—Ä–∞–µ–º —Ç–æ–≤–∞—Ä—ã
            return await self._search_and_show_products(scenario_state)
    
    async def _generate_data_collection_question(self, data_type: str, scenario_state: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        if data_type == "product_type":
            return ("üé® **–ö–∞–∫–æ–π —Ç–∏–ø —É–∫—Ä–∞—à–µ–Ω–∏–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?**\n\n"
                   "üíç –ö–æ–ª—å—Ü–∞\n"
                   "üìø –ë—Ä–∞—Å–ª–µ—Ç—ã\n" 
                   "üëÇ –°–µ—Ä—å–≥–∏\n"
                   "üìø –ë—É—Å—ã –∏ –æ–∂–µ—Ä–µ–ª—å—è\n"
                   "üî∏ –ü–æ–¥–≤–µ—Å–∫–∏ –∏ –∫—É–ª–æ–Ω—ã\n\n"
                   "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –∏—â–µ—Ç–µ!")
        
        elif data_type == "budget":
            return ("üí∞ **–ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç?**\n\n"
                   "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –≥–æ—Ç–æ–≤—ã –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ —É–∫—Ä–∞—à–µ–Ω–∏–µ.\n"
                   "–ù–∞–ø—Ä–∏–º–µ—Ä: '–¥–æ 5000 —Ä—É–±–ª–µ–π' –∏–ª–∏ '–æ–∫–æ–ª–æ 10000'")
        
        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞."
    
    async def _search_and_show_products(self, scenario_state: Dict[str, Any]) -> Dict[str, Any]:
        """–ò—â–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–æ–≤–∞—Ä—ã"""
        intent = scenario_state["intent"]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        search_query = ""
        if intent.get("product_type"):
            search_query = intent["product_type"]
        
        # –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã
        try:
            products = await self.product_manager.search_products(
                query=search_query,
                budget_max=intent.get("budget"),
                limit=5
            )
            
            if not products:
                return {
                    "success": True,
                    "scenario_state": scenario_state,
                    "response_message": (
                        f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º "
                        f"({search_query}, –¥–æ {intent.get('budget', '–ª—é–±–æ–π')}‚ÇΩ).\n\n"
                        f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –∏–º–µ–Ω–Ω–æ –∏—â–µ—Ç–µ."
                    ),
                    "next_action": "restart_search",
                    "requires_user_input": True
                }
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
            products_message = self._format_products_for_selection(products, intent.get("budget"))
            
            scenario_state["found_products"] = products
            scenario_state["step"] = "product_selection"
            
            return {
                "success": True,
                "scenario_state": scenario_state,
                "response_message": products_message,
                "next_action": "select_product",
                "requires_user_input": True
            }
            
        except Exception as e:
            app_logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            return {
                "success": False,
                "error": str(e),
                "response_message": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            }
    
    def _format_products_for_selection(self, products: List[Dict], budget: Optional[float] = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
        message = "üéÅ **–ü–æ–¥–æ–±—Ä–∞–ª –¥–ª—è –≤–∞—Å —É–∫—Ä–∞—à–µ–Ω–∏—è:**\n\n"
        
        for i, product in enumerate(products[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3 —Ç–æ–≤–∞—Ä–∞
            name = product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            price = product.get('price', 0)
            description = product.get('description', '')
            
            message += f"**{i}. {name}** ‚Äî {int(price):,}‚ÇΩ\n"
            if description and len(description) > 5:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –æ–ø–∏—Å–∞–Ω–∏—è
                short_desc = description[:100] + "..." if len(description) > 100 else description
                message += f"   _{short_desc}_\n"
            message += "\n"
        
        message += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ (1, 2, 3) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø–æ–∫–∞–∑–∞—Ç—å –µ—â–µ' –¥–ª—è –¥—Ä—É–≥–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
        
        return message
    
    async def process_product_selection(self, user_id: int, selection: str, scenario_state: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        selection_lower = selection.lower()
        found_products = scenario_state.get("found_products", [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±–æ—Ä –ø–æ –Ω–æ–º–µ—Ä—É
        if selection_lower in ['1', '2', '3']:
            try:
                index = int(selection_lower) - 1
                if 0 <= index < len(found_products):
                    selected_product = found_products[index]
                    return await self._process_selected_product(user_id, selected_product, scenario_state)
            except (ValueError, IndexError):
                pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫–∞–∑ –¥—Ä—É–≥–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        if any(word in selection_lower for word in ['–µ—â–µ', '–¥—Ä—É–≥–∏–µ', '–±–æ–ª—å—à–µ', '–ø–æ–∫–∞–∑–∞—Ç—å']):
            # TODO: –ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤
            return {
                "success": True,
                "scenario_state": scenario_state,
                "response_message": "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (1, 2, 3).",
                "next_action": "select_product",
                "requires_user_input": True
            }
        
        # –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
        return {
            "success": True,
            "scenario_state": scenario_state,
            "response_message": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ (1, 2 –∏–ª–∏ 3) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø–æ–∫–∞–∑–∞—Ç—å –µ—â–µ'.",
            "next_action": "select_product",
            "requires_user_input": True
        }
    
    async def _process_selected_product(self, user_id: int, product: Dict, scenario_state: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é"""
        scenario_state["selected_product"] = product
        scenario_state["step"] = "order_confirmation"
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É
        product_price = product.get('price', 0)
        delivery_info = self._calculate_delivery(product_price)
        
        scenario_state["delivery_info"] = delivery_info
        scenario_state["total_amount"] = product_price
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        confirmation_message = self._generate_final_confirmation(product, delivery_info)
        
        return {
            "success": True,
            "scenario_state": scenario_state,
            "response_message": confirmation_message,
            "next_action": "final_confirmation",
            "requires_user_input": True
        }
    
    def _calculate_delivery(self, product_price: float) -> Dict[str, Any]:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ"""
        is_free = product_price >= self.free_delivery_threshold
        
        return {
            "is_free": is_free,
            "cost": 0 if is_free else None,  # None –æ–∑–Ω–∞—á–∞–µ—Ç "–ø–æ —Ç–∞—Ä–∏—Ñ–∞–º"
            "description": (
                "–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è üéÅ" if is_free 
                else "—Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º –∏ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏"
            )
        }
    
    def _generate_final_confirmation(self, product: Dict, delivery_info: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
        name = product.get('name', '–¢–æ–≤–∞—Ä')
        price = product.get('price', 0)
        
        message = f"üõçÔ∏è **–í–∞—à –∑–∞–∫–∞–∑:**\n"
        message += f"‚Ä¢ {name} ‚Äî {int(price):,}‚ÇΩ\n\n"
        
        message += f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ –ü–æ—á—Ç–æ–π –†–æ—Å—Å–∏–∏ ‚Äî {delivery_info['description']}\n"
        message += f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: [—É—Ç–æ—á–Ω–∏—Ç—å –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω]\n\n"
        
        message += "‚úÖ **–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑**\n"
        message += "üìù –£–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n" 
        message += "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"
        
        return message
    
    async def process_final_confirmation(self, user_id: int, response: str, scenario_state: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
        response_lower = response.lower()
        
        if any(word in response_lower for word in ['–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', '–¥–∞', '–∑–∞–∫–∞–∑', '–æ—Ñ–æ—Ä–º–∏—Ç—å', '‚úÖ']):
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª - —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
            return await self._create_final_order(user_id, scenario_state)
        
        elif any(word in response_lower for word in ['–¥–∞–Ω–Ω—ã–µ', '–ø–æ–ª—É—á–∞—Ç–µ–ª—å', '—É–∫–∞–∑–∞—Ç—å', 'üìù']):
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            return {
                "success": True,
                "scenario_state": scenario_state,
                "response_message": (
                    "üìã **–£–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:**\n\n"
                    "üë§ –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è\n"
                    "üìû –¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏\n"
                    "üìç –ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å (6 —Ü–∏—Ñ—Ä)\n\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: –ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞, +7 900 123 45 67, 190000"
                ),
                "next_action": "collect_recipient_data",
                "requires_user_input": True
            }
        
        elif any(word in response_lower for word in ['–æ—Ç–º–µ–Ω–∏—Ç—å', '–æ—Ç–º–µ–Ω–∞', '–Ω–µ—Ç', '‚ùå']):
            # –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
            return {
                "success": True,
                "scenario_completed": True,
                "response_message": "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –∑–∞–∫–∞–∑–∞—Ç—å - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å! üòä",
                "next_action": "none"
            }
        
        else:
            # –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            return {
                "success": True,
                "scenario_state": scenario_state,
                "response_message": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ:\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑\nüìù –£–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                "next_action": "final_confirmation",
                "requires_user_input": True
            }
    
    async def _create_final_order(self, user_id: int, scenario_state: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ —Å–æ –≤—Å–µ–º–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏"""
        try:
            selected_product = scenario_state["selected_product"]
            delivery_info = scenario_state["delivery_info"]
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–∫–∞–∑–∞
            customer_data = {
                "name": scenario_state.get("context", {}).get("name", "–ö–ª–∏–µ–Ω—Ç –∏–∑ Telegram"),
                "phone": scenario_state.get("context", {}).get("phone", "+7 900 000 00 00"),
                "email": scenario_state.get("context", {}).get("email"),
                "telegram_id": user_id
            }
            
            products = [{
                "name": selected_product.get("name"),
                "price": selected_product.get("price"),
                "quantity": 1,
                "moysklad_id": selected_product.get("id")
            }]
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å –ø–ª–∞—Ç–µ–∂–æ–º —á–µ—Ä–µ–∑ ProductManager
            order_result = await self.product_manager.create_order_with_payment(
                customer_data=customer_data,
                products=products,
                telegram_user_id=user_id,
                delivery_info=delivery_info if not delivery_info["is_free"] else None
            )
            
            if order_result.get("success"):
                payment_url = order_result.get("payment_url")
                order_id = order_result.get("order_id")
                
                success_message = (
                    f"üéâ **–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!**\n\n"
                    f"üìã –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id}\n"
                    f"üí∞ –ö –æ–ø–ª–∞—Ç–µ: {int(selected_product.get('price', 0)):,}‚ÇΩ\n\n"
                )
                
                if payment_url:
                    success_message += f"üí≥ **–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:**\n{payment_url}\n\n"
                    success_message += "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–¥–∞–Ω –≤ —Ä–∞–±–æ—Ç—É! üöÄ"
                else:
                    success_message += "‚è≥ –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
                
                return {
                    "success": True,
                    "scenario_completed": True,
                    "order_created": True,
                    "order_id": order_id,
                    "payment_url": payment_url,
                    "response_message": success_message,
                    "next_action": "none"
                }
            else:
                error_msg = order_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                return {
                    "success": False,
                    "error": error_msg,
                    "response_message": f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É."
                }
                
        except Exception as e:
            app_logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞: {e}")
            return {
                "success": False,
                "error": str(e),
                "response_message": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É."
            }