"""
Delivery Manager - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–æ–≥–∏–∫—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç 15,000‚ÇΩ –∏ —Ç–∞—Ä–∏—Ñ—ã –ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏
"""
from typing import Dict, List, Optional, Any, Union
from utils.logger import app_logger


class DeliveryManager:
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Ä–∞—Å—á–µ—Ç–æ–º —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    
    –ü—Ä–∞–≤–∏–ª–∞:
    - –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ ‚â• 15,000‚ÇΩ
    - –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º –ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –†–æ—Å—Å–∏–∏
    - –†–∞—Å—á–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö —Å—Ä–æ–∫–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
        self.free_delivery_threshold = 15000  # –ü–æ—Ä–æ–≥ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ä—É–±–ª—è—Ö
        self.base_regions = self._build_regions_data()
        self.delivery_methods = self._build_delivery_methods()
        
        app_logger.info("DeliveryManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _build_regions_data(self) -> Dict[str, Dict]:
        """–°–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–≥–∏–æ–Ω–∞—Ö –∏ —Ç–∞—Ä–∏—Ñ–∞—Ö"""
        return {
            "moscow": {
                "name": "–ú–æ—Å–∫–≤–∞",
                "zone": 1,
                "base_cost": 200,
                "delivery_days": "1-2",
                "keywords": ["–º–æ—Å–∫–≤–∞", "–º–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–º—Å–∫"]
            },
            "spb": {
                "name": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", 
                "zone": 1,
                "base_cost": 220,
                "delivery_days": "1-3",
                "keywords": ["—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥", "—Å–ø–±", "–ø–∏—Ç–µ—Ä", "–ª–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"]
            },
            "center": {
                "name": "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–µ–≥–∏–æ–Ω",
                "zone": 2,
                "base_cost": 280,
                "delivery_days": "2-4",
                "keywords": ["–≤–æ—Ä–æ–Ω–µ–∂", "—Ç—É–ª–∞", "–∫–∞–ª—É–≥–∞", "—Ä—è–∑–∞–Ω—å", "—Ç–∞–º–±–æ–≤", "–ª–∏–ø–µ—Ü–∫"]
            },
            "volga": {
                "name": "–ü–æ–≤–æ–ª–∂—å–µ",
                "zone": 2,
                "base_cost": 300,
                "delivery_days": "3-5", 
                "keywords": ["–∫–∞–∑–∞–Ω—å", "–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥", "—Å–∞–º–∞—Ä–∞", "—Å–∞—Ä–∞—Ç–æ–≤", "–≤–æ–ª–≥–æ–≥—Ä–∞–¥", "—É—Ñ–∞"]
            },
            "ural": {
                "name": "–£—Ä–∞–ª",
                "zone": 3,
                "base_cost": 350,
                "delivery_days": "4-6",
                "keywords": ["–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "—á–µ–ª—è–±–∏–Ω—Å–∫", "–ø–µ—Ä–º—å", "—Ç—é–º–µ–Ω—å"]
            },
            "siberia": {
                "name": "–°–∏–±–∏—Ä—å",
                "zone": 3,
                "base_cost": 400,
                "delivery_days": "5-8",
                "keywords": ["–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–æ–º—Å–∫", "–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫", "—Ç–æ–º—Å–∫", "–±–∞—Ä–Ω–∞—É–ª"]
            },
            "far_east": {
                "name": "–î–∞–ª—å–Ω–∏–π –í–æ—Å—Ç–æ–∫",
                "zone": 4,
                "base_cost": 500,
                "delivery_days": "7-12",
                "keywords": ["–≤–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫", "—Ö–∞–±–∞—Ä–æ–≤—Å–∫", "–±–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫", "—é–∂–Ω–æ-—Å–∞—Ö–∞–ª–∏–Ω—Å–∫"]
            },
            "other": {
                "name": "–î—Ä—É–≥–∏–µ —Ä–µ–≥–∏–æ–Ω—ã",
                "zone": 3,
                "base_cost": 380,
                "delivery_days": "4-7",
                "keywords": []
            }
        }
    
    def _build_delivery_methods(self) -> Dict[str, Dict]:
        """–°–æ–∑–¥–∞–µ—Ç –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç–∞–≤–∫–∏"""
        return {
            "russian_post": {
                "name": "–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏",
                "description": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º –ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏",
                "is_default": True
            },
            "courier": {
                "name": "–ö—É—Ä—å–µ—Ä—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞", 
                "description": "–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º (—Ç–æ–ª—å–∫–æ –∫—Ä—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞)",
                "is_default": False,
                "extra_cost": 200,
                "available_regions": ["moscow", "spb"]
            }
        }
    
    def calculate_delivery_cost(self, order_total: float, city: Optional[str] = None, 
                               postcode: Optional[str] = None) -> Dict[str, Any]:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
        
        Args:
            order_total: –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞
            city: –ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏
            postcode: –ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
            
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ—Å—Ç–∞–≤–∫–µ
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É
        if order_total >= self.free_delivery_threshold:
            return {
                "is_free": True,
                "cost": 0,
                "reason": f"–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç {self.free_delivery_threshold:,}‚ÇΩ",
                "delivery_days": "1-3",
                "methods": ["russian_post"]
            }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω
        region_data = self._detect_region(city, postcode)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
        base_cost = region_data["base_cost"]
        
        return {
            "is_free": False,
            "cost": base_cost,
            "region": region_data["name"],
            "delivery_days": region_data["delivery_days"],
            "methods": ["russian_post"],
            "description": "–ü–æ —Ç–∞—Ä–∏—Ñ–∞–º –ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏"
        }
    
    def _detect_region(self, city: Optional[str] = None, 
                      postcode: Optional[str] = None) -> Dict[str, Any]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–≥–∏–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏"""
        if city:
            city_lower = city.lower().strip()
            
            # –ò—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            for region_code, region_data in self.base_regions.items():
                for keyword in region_data["keywords"]:
                    if keyword in city_lower:
                        return region_data
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –ø–æ—á—Ç–æ–≤–æ–º—É –∏–Ω–¥–µ–∫—Å—É
        if postcode and len(postcode) == 6:
            first_digit = int(postcode[0])
            
            # –ú–æ—Å–∫–≤–∞ –∏ –æ–±–ª–∞—Å—Ç—å: 1xxxxx
            if first_digit == 1:
                return self.base_regions["moscow"]
            # –°–ü–± –∏ –æ–±–ª–∞—Å—Ç—å: 2xxxxx  
            elif first_digit == 2:
                return self.base_regions["spb"]
            # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã: 3xxxxx, 4xxxxx
            elif first_digit in [3, 4]:
                return self.base_regions["center"]
            # –ü–æ–≤–æ–ª–∂—å–µ: 4xxxxx, 5xxxxx
            elif first_digit in [4, 5]:
                return self.base_regions["volga"]
            # –£—Ä–∞–ª: 6xxxxx
            elif first_digit == 6:
                return self.base_regions["ural"]
            # –°–∏–±–∏—Ä—å: 6xxxxx, 7xxxxx
            elif first_digit in [6, 7]:
                return self.base_regions["siberia"]
            # –î–∞–ª—å–Ω–∏–π –í–æ—Å—Ç–æ–∫: 6xxxxx, 7xxxxx
            elif first_digit in [6, 7]:
                return self.base_regions["far_east"]
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –¥—Ä—É–≥–∏–µ —Ä–µ–≥–∏–æ–Ω—ã
        return self.base_regions["other"]
    
    def get_delivery_info_text(self, order_total: float, city: Optional[str] = None,
                              postcode: Optional[str] = None) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –¥–æ—Å—Ç–∞–≤–∫–∏
        
        Args:
            order_total: –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞
            city: –ì–æ—Ä–æ–¥
            postcode: –ò–Ω–¥–µ–∫—Å
            
        Returns:
            –ì–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É
        """
        delivery_info = self.calculate_delivery_cost(order_total, city, postcode)
        
        if delivery_info["is_free"]:
            return f"""üöö **–î–æ—Å—Ç–∞–≤–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!**

‚úÖ {delivery_info['reason']}
üìÖ –°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_info['delivery_days']} –¥–Ω—è
üì¶ –°–ø–æ—Å–æ–±: –ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏"""
        
        else:
            region_text = f" ({delivery_info['region']})" if delivery_info.get('region') else ""
            
            return f"""üöö **–£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏**{region_text}

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {delivery_info['cost']}‚ÇΩ
üìÖ –°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_info['delivery_days']} –¥–Ω–µ–π
üì¶ –°–ø–æ—Å–æ–±: {delivery_info['description']}

üí° *–î–æ—Å—Ç–∞–≤–∫–∞ —Å—Ç–∞–Ω–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç {self.free_delivery_threshold:,}‚ÇΩ*"""
    
    def check_free_delivery_eligibility(self, order_total: float) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–æ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É"""
        if order_total >= self.free_delivery_threshold:
            return {
                "eligible": True,
                "current_total": order_total,
                "threshold": self.free_delivery_threshold,
                "savings": 0  # –≠–∫–æ–Ω–æ–º–∏—è —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞
            }
        else:
            needed_amount = self.free_delivery_threshold - order_total
            estimated_savings = 300  # –°—Ä–µ–¥–Ω—è—è —ç–∫–æ–Ω–æ–º–∏—è
            
            return {
                "eligible": False,
                "current_total": order_total,
                "threshold": self.free_delivery_threshold,
                "needed_amount": needed_amount,
                "estimated_savings": estimated_savings
            }
    
    def get_free_delivery_upsell_text(self, order_total: float) -> Optional[str]:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ç–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –¥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏
        
        Args:
            order_total: –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞
            
        Returns:
            –¢–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω
        """
        eligibility = self.check_free_delivery_eligibility(order_total)
        
        if eligibility["eligible"]:
            return None
        
        needed = eligibility["needed_amount"]
        savings = eligibility["estimated_savings"]
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 5000‚ÇΩ
        if needed <= 5000:
            return f"""üí° **–°–æ–≤–µ—Ç –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏**

–î–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ {needed:,}‚ÇΩ!
–≠–∫–æ–Ω–æ–º–∏—è —Å–æ—Å—Ç–∞–≤–∏—Ç –æ–∫–æ–ª–æ {savings}‚ÇΩ 

–ú–æ–∂–µ—Ç –±—ã—Ç—å, –¥–æ–±–∞–≤–∏—Ç–µ —á—Ç–æ-—Ç–æ –µ—â–µ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞? üõçÔ∏è"""
        
        return None
    
    def validate_delivery_address(self, city: Optional[str] = None, 
                                 postcode: Optional[str] = None,
                                 address: Optional[str] = None) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏"""
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
        if postcode:
            if len(postcode) != 6 or not postcode.isdigit():
                issues.append("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—á—Ç–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 6 —Ü–∏—Ñ—Ä)")
            elif postcode.startswith('0'):
                issues.append("–ü–æ—á—Ç–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã –≤ –†–æ—Å—Å–∏–∏ –Ω–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ä–æ–¥
        if city and len(city.strip()) < 2:
            issues.append("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å
        if address and len(address.strip()) < 10:
            issues.append("–ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π - —É–∫–∞–∂–∏—Ç–µ —É–ª–∏—Ü—É, –¥–æ–º –∏ –∫–≤–∞—Ä—Ç–∏—Ä—É")
        
        return {
            "is_valid": len(issues) == 0,
            "issues": issues,
            "suggestions": self._get_address_suggestions(city, postcode)
        }
    
    def _get_address_suggestions(self, city: Optional[str], 
                                postcode: Optional[str]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –∞–¥—Ä–µ—Å—É"""
        suggestions = []
        
        if not city and not postcode:
            suggestions.append("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –ø–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏")
        
        if city and not postcode:
            suggestions.append("–î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –ø–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å")
        
        if postcode and not city:
            suggestions.append("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏")
        
        return suggestions
    
    def get_delivery_methods_for_region(self, region_code: str) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞"""
        available_methods = []
        
        # –ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤–µ–∑–¥–µ
        russian_post = self.delivery_methods["russian_post"].copy()
        available_methods.append(russian_post)
        
        # –ö—É—Ä—å–µ—Ä—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ –≤ –∫—Ä—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö
        courier = self.delivery_methods["courier"]
        if region_code in courier.get("available_regions", []):
            courier_info = courier.copy()
            available_methods.append(courier_info)
        
        return available_methods
    
    def estimate_delivery_date_range(self, region_data: Dict[str, Any]) -> str:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–æ—Å—Ç–∞–≤–∫–∏"""
        from datetime import datetime, timedelta
        
        delivery_days = region_data["delivery_days"]
        
        # –ü–∞—Ä—Å–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–Ω–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä "3-5")
        if "-" in delivery_days:
            min_days, max_days = map(int, delivery_days.split("-"))
        else:
            min_days = max_days = int(delivery_days)
        
        today = datetime.now()
        min_date = today + timedelta(days=min_days)
        max_date = today + timedelta(days=max_days)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
        min_str = min_date.strftime("%d.%m")
        max_str = max_date.strftime("%d.%m")
        
        if min_str == max_str:
            return min_str
        else:
            return f"{min_str} - {max_str}"
    
    def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
        return {
            "free_delivery_threshold": self.free_delivery_threshold,
            "total_regions": len(self.base_regions),
            "delivery_methods": len(self.delivery_methods),
            "supported_zones": list(set(r["zone"] for r in self.base_regions.values()))
        }