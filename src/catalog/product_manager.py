"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ú–æ–π–°–∫–ª–∞–¥
"""
import asyncio
from typing import Dict, List, Optional, Any
from src.integrations.moysklad_client import MoySkladClient
from src.search.embeddings_manager import EmbeddingsManager
from src.delivery.russian_post_client import RussianPostClient
from src.payments.yukassa_client import YuKassaClient
from utils.logger import app_logger


class ProductManager:
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ç–∞–ª–æ–≥–æ–º —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø–æ–∏—Å–∫–æ–º
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
        self.moysklad = MoySkladClient()
        self.embeddings_manager = EmbeddingsManager()
        self.delivery_client = RussianPostClient()
        self.payment_client = YuKassaClient()
        self._catalog_cache = {}  # –ö—ç—à –∫–∞—Ç–∞–ª–æ–≥–∞
        self._cache_timestamp = None
        self._cache_ttl = 3600  # TTL –∫—ç—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (1 —á–∞—Å)
        
        app_logger.info("ProductManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def search_products(self, query: str, budget_min: Optional[float] = None, 
                            budget_max: Optional[float] = None, category: Optional[str] = None) -> List[Dict]:
        """
        –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            budget_min: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç
            budget_max: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
        """
        try:
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –∏—â–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if category:
                products = await self.moysklad.search_products_by_category(category, limit=20)
            else:
                # –ò–Ω–∞—á–µ –ø–æ–∏—Å–∫ –ø–æ –æ–±—â–µ–º—É –∑–∞–ø—Ä–æ—Å—É
                products = await self.moysklad.get_products(limit=50, search=query, 
                                                          price_min=budget_min, price_max=budget_max)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –±—é–¥–∂–µ—Ç—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if budget_min is not None or budget_max is not None:
                filtered_products = []
                for product in products:
                    price = product.get('price', 0)
                    if budget_min is not None and price < budget_min:
                        continue
                    if budget_max is not None and price > budget_max:
                        continue
                    filtered_products.append(product)
                products = filtered_products
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∞–ª–∏—á–∏—é –∏ —Ü–µ–Ω–µ
            products.sort(key=lambda p: (-p.get('stock', 0), p.get('price', 0)))
            
            app_logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
            return products
            
        except Exception as e:
            app_logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            return []
    
    async def get_product_recommendations(self, budget: float, category: str) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –±—é–¥–∂–µ—Ç—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        
        Args:
            budget: –ë—é–¥–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        """
        # –†–∞—Å—à–∏—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –±—é–¥–∂–µ—Ç–∞ –Ω–∞ ¬±20% –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        budget_min = budget * 0.8
        budget_max = budget * 1.2
        
        products = await self.search_products("", budget_min, budget_max, category)
        
        # –û—Ç–±–∏—Ä–∞–µ–º —Ç–æ–ø-5 —Ç–æ–≤–∞—Ä–æ–≤
        recommendations = products[:5]
        
        app_logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {len(recommendations)} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} –∏ –±—é–¥–∂–µ—Ç–∞ {budget}")
        
        return recommendations
    
    def format_product_for_chat(self, product: Dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç
        
        Args:
            product: –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        name = product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        price = product.get('price', 0)
        stock = product.get('stock', 0)
        description = product.get('description', '')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üíé **{name}**\n"
        message += f"üí∞ –¶–µ–Ω–∞: {price:,.0f} ‚ÇΩ\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ
        if stock > 0:
            message += f"‚úÖ –í –Ω–∞–ª–∏—á–∏–∏: {stock} —à—Ç.\n"
        else:
            message += f"‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if description:
            message += f"üìù {description[:200]}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä—Ç–∏–∫—É–ª –µ—Å–ª–∏ –µ—Å—Ç—å
        if product.get('article'):
            message += f"üè∑Ô∏è –ê—Ä—Ç–∏–∫—É–ª: {product['article']}\n"
        
        return message
    
    def format_products_list(self, products: List[Dict], max_products: int = 5) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç
        
        Args:
            products: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
            max_products: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–ø–∏—Å–∫–µ
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤
        """
        if not products:
            return "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–≤–∞—Ä—ã –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –±—é–¥–∂–µ—Ç\n‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å"
        
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
        display_products = products[:max_products]
        
        message = f"üõçÔ∏è **–ù–∞–π–¥–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞—é –ª—É—á—à–∏–µ {len(display_products)}:**\n\n"
        
        for i, product in enumerate(display_products, 1):
            message += f"**{i}. {product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}**\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
            images = product.get('images', [])
            if images:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
                first_image = images[0]
                message += f"üñºÔ∏è {first_image}\n"
            
            message += f"   üí∞ {product.get('price', 0):,.0f} ‚ÇΩ"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞–ª–∏—á–∏—è
            stock = product.get('stock', 0)
            if stock > 0:
                message += f" | ‚úÖ –í –Ω–∞–ª–∏—á–∏–∏ ({stock} —à—Ç.)\n"
            else:
                message += f" | ‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏\n"
            
            # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            description = product.get('description', '')
            if description:
                short_desc = description[:100] + ("..." if len(description) > 100 else "")
                message += f"   üìù {short_desc}\n"
            
            # –ê—Ä—Ç–∏–∫—É–ª –µ—Å–ª–∏ –µ—Å—Ç—å
            if product.get('article'):
                message += f"   üè∑Ô∏è –ê—Ä—Ç–∏–∫—É–ª: {product['article']}\n"
            
            message += "\n"
        
        if len(products) > max_products:
            message += f"... –∏ –µ—â–µ {len(products) - max_products} —Ç–æ–≤–∞—Ä–æ–≤\n\n"
        
        message += "üí° –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∫–∞–∫–æ–º-—Ç–æ —Ç–æ–≤–∞—Ä–µ? –ù–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä!"
        
        return message
    
    async def get_product_details(self, product_id: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        
        Args:
            product_id: ID —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ
        """
        return await self.moysklad.get_product_by_id(product_id)
    
    async def create_order(self, customer_data: Dict, products: List[Dict], telegram_user_id: int) -> Optional[str]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑ –≤ –ú–æ–π–°–∫–ª–∞–¥
        
        Args:
            customer_data: –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
            products: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
            telegram_user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            
        Returns:
            ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
        """
        try:
            order_id = await self.moysklad.create_customer_order(customer_data, products, telegram_user_id)
            
            if order_id:
                app_logger.info(f"–°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ {order_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user_id}")
                return order_id
            else:
                app_logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user_id}")
                return None
                
        except Exception as e:
            app_logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
            return None
    
    def parse_budget_from_text(self, text: str) -> Optional[float]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –±—é–¥–∂–µ—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –±—é–¥–∂–µ—Ç –∏–ª–∏ None
        """
        import re
        
        # –ò—â–µ–º —á–∏—Å–ª–∞ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤–∞–ª—é—Ç—ã
        patterns = [
            r'(\d+(?:\s?\d{3})*)\s*(?:—Ä—É–±|‚ÇΩ|—Ä—É–±–ª–µ–π|—Ä\.?)',  # 5000 —Ä—É–±, 5 000 ‚ÇΩ
            r'(\d+)\s*(?:—Ç—ã—Å—è—á|—Ç—ã—Å\.?)',  # 5 —Ç—ã—Å—è—á, 10 —Ç—ã—Å
            r'–¥–æ\s*(\d+(?:\s?\d{3})*)',  # –¥–æ 5000
            r'(\d+(?:\s?\d{3})*)\s*—Ä—É–±–ª–µ–π',  # 5000 —Ä—É–±–ª–µ–π
            r'–±—é–¥–∂–µ—Ç\s*(\d+(?:\s?\d{3})*)',  # –±—é–¥–∂–µ—Ç 5000
        ]
        
        text_lower = text.lower()
        
        for pattern in patterns:
            matches = re.findall(pattern, text_lower)
            if matches:
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–µ)
                budget_str = matches[-1].replace(' ', '')
                try:
                    budget = float(budget_str)
                    
                    # –ï—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç—ã —Ç—ã—Å—è—á–∏, —É–º–Ω–æ–∂–∞–µ–º
                    if '—Ç—ã—Å—è—á' in text_lower or '—Ç—ã—Å' in text_lower:
                        budget *= 1000
                    
                    return budget
                except ValueError:
                    continue
        
        return None
    
    def extract_category_from_text(self, text: str) -> Optional[str]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        
        Args:
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–ª–∏ None
        """
        text_lower = text.lower()
        
        # –ú–∞–ø–ø–∏–Ω–≥ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_mapping = {
            '–∫–æ–ª—å—Ü–∞': ['–∫–æ–ª—å—Ü–æ', '–∫–æ–ª—å—Ü–∞', '–ø–µ—Ä—Å—Ç–µ–Ω—å', '–ø–µ—Ä—Å—Ç–Ω–∏'],
            '—Å–µ—Ä—å–≥–∏': ['—Å–µ—Ä—å–≥–∏', '—Å–µ—Ä–µ–∂–∫–∏', '—Å–µ—Ä—ë–∂–∫–∏'],
            '–±—Ä–∞—Å–ª–µ—Ç—ã': ['–±—Ä–∞—Å–ª–µ—Ç', '–±—Ä–∞—Å–ª–µ—Ç—ã'],
            '–∫—É–ª–æ–Ω—ã': ['–∫—É–ª–æ–Ω', '–∫—É–ª–æ–Ω—ã', '–ø–æ–¥–≤–µ—Å–∫–∞', '–ø–æ–¥–≤–µ—Å–∫–∏', '–∫—É–ª–æ–Ω—á–∏–∫'],
            '–±—É—Å—ã': ['–±—É—Å—ã', '–æ–∂–µ—Ä–µ–ª—å–µ', '–∫–æ–ª—å–µ', '–±—É—Å–∏–∫–∏'],
            '–±—Ä–æ—à–∫–∏': ['–±—Ä–æ—à—å', '–±—Ä–æ—à–∫–∞', '–±—Ä–æ—à–∫–∏'],
            '–∫–æ–º–ø–ª–µ–∫—Ç—ã': ['–∫–æ–º–ø–ª–µ–∫—Ç', '–∫–æ–º–ø–ª–µ–∫—Ç—ã', '–Ω–∞–±–æ—Ä']
        }
        
        for category, keywords in category_mapping.items():
            for keyword in keywords:
                if keyword in text_lower:
                    return category
        
        return None
    
    async def semantic_search(self, query: str, limit: int = 10, threshold: float = 0.5) -> List[Dict]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            threshold: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Å—Ö–æ–¥—Å—Ç–≤–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
        """
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
            results = await self.embeddings_manager.semantic_search(query, limit, threshold)
            
            if not results:
                return []
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç ProductManager
            products = []
            for result in results:
                product = {
                    'id': result['id'],
                    'name': result['name'],
                    'description': result.get('description', ''),
                    'category': result.get('category', ''),
                    'price': result.get('price', 0),
                    'stock': 0,  # –ü–æ–∫–∞ –æ—Å—Ç–∞—Ç–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º
                    'images': [],
                    'article': '',
                    'weight': 0,
                    'volume': 0,
                    'similarity_score': result['similarity_score']  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
                }
                products.append(product)
            
            app_logger.info(f"–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ '{query}': –Ω–∞–π–¥–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
            return products
            
        except Exception as e:
            app_logger.error(f"–û—à–∏–±–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
            return []
    
    def _calculate_semantic_threshold(self, query: str, category: Optional[str] = None, 
                                    has_budget: bool = False) -> float:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Å—Ö–æ–¥—Å—Ç–≤–∞ –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–æ–≤
            has_budget: –ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –±—é–¥–∂–µ—Ç—É
            
        Returns:
            –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Å—Ö–æ–¥—Å—Ç–≤–∞
        """
        # –ë–∞–∑–æ–≤—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –æ–±—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        threshold = 0.4
        
        # –ü–æ–≤—ã—à–∞–µ–º –ø–æ—Ä–æ–≥ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        if category:
            threshold = 0.5
        
        # –ü–æ–≤—ã—à–∞–µ–º –ø–æ—Ä–æ–≥ –µ—Å–ª–∏ –µ—Å—Ç—å –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –±—é–¥–∂–µ—Ç (—Å–∞–º—ã–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å)
        if category and has_budget:
            threshold = 0.6
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤—ã—à–∞–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è –æ—á–µ–Ω—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        specific_words = ['—Ä–∞–∑–º–µ—Ä', '—Ü–≤–µ—Ç', '—Å—Ç–∏–ª—å', '–º–æ–¥–µ–ª—å', '–∫–æ–ª–ª–µ–∫—Ü–∏—è', '–¥–∏–∑–∞–π–Ω']
        if any(word in query.lower() for word in specific_words):
            threshold += 0.1
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ 0.8
        threshold = min(threshold, 0.8)
        
        app_logger.debug(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ —Å—Ö–æ–¥—Å—Ç–≤–∞: {threshold} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}', –∫–∞—Ç–µ–≥–æ—Ä–∏—è={category}, –±—é–¥–∂–µ—Ç={has_budget}")
        
        return threshold
    
    async def smart_search(self, query: str, budget_min: Optional[float] = None, 
                          budget_max: Optional[float] = None, category: Optional[str] = None) -> List[Dict]:
        """
        –£–º–Ω—ã–π –ø–æ–∏—Å–∫: —Å–Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π, –∑–∞—Ç–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–∞–∫ fallback
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            budget_min: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç
            budget_max: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç  
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        """
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
            traditional_results = await self.search_products(query, budget_min, budget_max, category)
            
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
            if len(traditional_results) >= 3:
                app_logger.info(f"–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –¥–∞–ª {len(traditional_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                return traditional_results
            
            # –ò–Ω–∞—á–µ –ø—Ä–æ–±—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
            app_logger.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞, –ø—Ä–æ–±—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
            semantic_query = query
            if category:
                semantic_query = f"{category} {query}" if query else category
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Å—Ö–æ–¥—Å—Ç–≤–∞
            has_budget = budget_min is not None or budget_max is not None
            threshold = self._calculate_semantic_threshold(semantic_query, category, has_budget)
            
            semantic_results = await self.semantic_search(semantic_query, limit=10, threshold=threshold)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –±—é–¥–∂–µ—Ç—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if budget_min is not None or budget_max is not None:
                filtered_results = []
                for product in semantic_results:
                    price = product.get('price', 0)
                    if budget_min is not None and price < budget_min:
                        continue
                    if budget_max is not None and price > budget_max:
                        continue
                    filtered_results.append(product)
                semantic_results = filtered_results
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞, –ø–æ—Ç–æ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ)
            combined_results = traditional_results + semantic_results
            
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID
            seen_ids = set()
            unique_results = []
            for product in combined_results:
                if product['id'] not in seen_ids:
                    seen_ids.add(product['id'])
                    unique_results.append(product)
            
            app_logger.info(f"–£–º–Ω—ã–π –ø–æ–∏—Å–∫: {len(traditional_results)} —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö + {len(semantic_results)} —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö = {len(unique_results)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö (–ø–æ—Ä–æ–≥: {threshold})")
            
            return unique_results[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        except Exception as e:
            app_logger.error(f"–û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ö–æ—Ç—è –±—ã —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            return await self.search_products(query, budget_min, budget_max, category)
    
    async def auto_update_embeddings_for_new_products(self, products: List[Dict]) -> int:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        
        Args:
            products: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏
            existing_ids = self.embeddings_manager.get_existing_product_ids()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
            new_products = [product for product in products if product['id'] not in existing_ids]
            
            if not new_products:
                return 0
            
            app_logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(new_products)} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            success_count = await self.embeddings_manager.batch_add_products(new_products)
            
            app_logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ {success_count} —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
            return success_count
            
        except Exception as e:
            app_logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")
            return 0
    
    async def get_categories_summary(self) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ç–æ–≤–∞—Ä–æ–≤
        
        Returns:
            –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
        """
        try:
            categories = await self.moysklad.get_product_categories()
            
            if not categories:
                return "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:\n‚Ä¢ –ö–æ–ª—å—Ü–∞\n‚Ä¢ –°–µ—Ä—å–≥–∏\n‚Ä¢ –ë—Ä–∞—Å–ª–µ—Ç—ã\n‚Ä¢ –ö—É–ª–æ–Ω—ã\n‚Ä¢ –ë—É—Å—ã\n‚Ä¢ –ë—Ä–æ—à–∫–∏"
            
            message = "üìÇ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:**\n\n"
            for category in categories:
                name = category.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                description = category.get('description', '')
                message += f"‚Ä¢ **{name}**"
                if description:
                    message += f" - {description}"
                message += "\n"
            
            return message
            
        except Exception as e:
            app_logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
            return "üìÇ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –∫–æ–ª—å—Ü–∞, —Å–µ—Ä—å–≥–∏, –±—Ä–∞—Å–ª–µ—Ç—ã, –∫—É–ª–æ–Ω—ã, –±—É—Å—ã, –±—Ä–æ—à–∫–∏"
    
    async def calculate_delivery_cost(self, to_postcode: str, products: List[Dict] = None) -> Dict:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
        
        Args:
            to_postcode: –ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            products: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–µ—Å–∞ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ
        """
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–∫–∞–∑–∞
            total_weight = self._calculate_total_weight(products) if products else None
            total_value = self._calculate_total_value(products) if products else None
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –ü–æ—á—Ç—É –†–æ—Å—Å–∏–∏
            delivery_info = await self.delivery_client.calculate_delivery_cost(
                to_postcode=to_postcode,
                weight=total_weight,
                declared_value=total_value
            )
            
            app_logger.info(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –¥–æ {to_postcode}: {delivery_info}")
            return delivery_info
            
        except Exception as e:
            app_logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {e}",
                "cost": 0,
                "delivery_time": 0
            }
    
    async def get_delivery_options(self, to_postcode: str, products: List[Dict] = None) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏
        
        Args:
            to_postcode: –ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            products: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏
        """
        try:
            total_value = self._calculate_total_value(products) if products else 1000
            options = await self.delivery_client.get_delivery_options(to_postcode, total_value)
            
            app_logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(options)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ {to_postcode}")
            return options
            
        except Exception as e:
            app_logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")
            return []
    
    def _calculate_total_weight(self, products: List[Dict]) -> int:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–π –≤–µ—Å —Ç–æ–≤–∞—Ä–æ–≤ –≤ –≥—Ä–∞–º–º–∞—Ö
        
        Args:
            products: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
            
        Returns:
            –û–±—â–∏–π –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö
        """
        if not products:
            return 50  # –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å —É–∫—Ä–∞—à–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –î–ª—è —è–Ω—Ç–∞—Ä–Ω—ã—Ö —É–∫—Ä–∞—à–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –≤–µ—Å–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_weights = {
            '–∫–æ–ª—å—Ü–∞': 15,
            '—Å–µ—Ä—å–≥–∏': 25,
            '–±—Ä–∞—Å–ª–µ—Ç—ã': 40,
            '–∫—É–ª–æ–Ω—ã': 20,
            '–ø–æ–¥–≤–µ—Å–∫–∏': 15,
            '–±—É—Å—ã': 80,
            '–æ–∂–µ—Ä–µ–ª—å—è': 100,
            '–±—Ä–æ—à–∫–∏': 30
        }
        
        total_weight = 0
        for product in products:
            category = product.get('category', '').lower()
            # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            weight = 30  # –í–µ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            for cat_name, cat_weight in category_weights.items():
                if cat_name in category:
                    weight = cat_weight
                    break
            
            quantity = product.get('quantity', 1)
            total_weight += weight * quantity
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–ø–∞–∫–æ–≤–∫—É (–ø—Ä–∏–º–µ—Ä–Ω–æ 20–≥ –Ω–∞ –∑–∞–∫–∞–∑ + 5–≥ –Ω–∞ –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä)
        packaging_weight = 20 + len(products) * 5
        
        return total_weight + packaging_weight
    
    def _calculate_total_value(self, products: List[Dict]) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤
        
        Args:
            products: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
            
        Returns:
            –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
        """
        if not products:
            return 1000  # –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        total_value = 0
        for product in products:
            price = product.get('price', 0)
            quantity = product.get('quantity', 1)
            total_value += price * quantity
        
        return total_value
    
    def parse_postcode_from_text(self, text: str) -> Optional[str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –∏–∑ —Ç–µ–∫—Å—Ç–∞
        
        Args:
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            –ù–∞–π–¥–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∏–ª–∏ None
        """
        import re
        
        # –ò—â–µ–º —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –ø–æ—á—Ç–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã (6 —Ü–∏—Ñ—Ä, –Ω–µ –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å 0)
        postcode_pattern = r'\b[1-9]\d{5}\b'
        matches = re.findall(postcode_pattern, text)
        
        if matches:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å
            postcode = matches[0]
            app_logger.info(f"–ù–∞–π–¥–µ–Ω –∏–Ω–¥–µ–∫—Å –≤ —Ç–µ–∫—Å—Ç–µ: {postcode}")
            return postcode
        
        return None
    
    def format_delivery_info_with_products(self, delivery_info: Dict, products: List[Dict] = None) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ —Å —É—á–µ—Ç–æ–º —Ç–æ–≤–∞—Ä–æ–≤
        
        Args:
            delivery_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ
            products: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        if not delivery_info.get("success"):
            return f"‚ùå {delivery_info.get('error', '–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏')}"
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ
        delivery_text = self.delivery_client.format_delivery_info(delivery_info)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –µ—Å–ª–∏ –µ—Å—Ç—å
        if products:
            total_weight = self._calculate_total_weight(products)
            total_value = self._calculate_total_value(products)
            items_count = len(products)
            
            delivery_text += f"""

üì¶ **–î–µ—Ç–∞–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**
‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤: {items_count} —à—Ç.
‚Ä¢ –û–±—â–∏–π –≤–µ—Å: {total_weight}–≥ (–≤–∫–ª—é—á–∞—è —É–ø–∞–∫–æ–≤–∫—É)
‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤: {total_value:,.0f} ‚ÇΩ
‚Ä¢ –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏"""
        
        return delivery_text
    
    async def create_order_with_payment(
        self, 
        customer_data: Dict, 
        products: List[Dict], 
        telegram_user_id: int,
        delivery_info: Optional[Dict] = None
    ) -> Dict:
        """
        –°–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑ –∏ —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã
        
        Args:
            customer_data: –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
            products: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
            telegram_user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            delivery_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏ –ø–ª–∞—Ç–µ–∂–∞
        """
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
            total_price = self._calculate_total_value(products)
            delivery_cost = delivery_info.get('cost', 0) if delivery_info else 0
            final_amount = total_price + delivery_cost
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –ú–æ–π–°–∫–ª–∞–¥
            order_id = await self.create_order(customer_data, products, telegram_user_id)
            
            if not order_id:
                return {
                    "success": False,
                    "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑"
                }
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
            items_for_payment = self._prepare_payment_items(products, delivery_info)
            
            description = f"–ó–∞–∫–∞–∑ ‚Ññ{order_id} - {len(products)} —Ç–æ–≤–∞—Ä(–æ–≤)"
            if delivery_info:
                description += f" —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π"
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
            payment_result = await self.payment_client.create_payment(
                amount=final_amount,
                order_id=order_id,
                description=description,
                customer_email=customer_data.get('email'),
                customer_phone=customer_data.get('phone'),
                items=items_for_payment,
                moysklad_order_id=order_id,  # –ü–µ—Ä–µ–¥–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ –ú–æ–π–°–∫–ª–∞–¥
                telegram_user_id=telegram_user_id  # –î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            )
            
            if not payment_result.get("success"):
                app_logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
                return {
                    "success": False,
                    "error": payment_result.get("error", "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"),
                    "order_id": order_id
                }
            
            app_logger.info(f"–°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ {order_id} —Å –ø–ª–∞—Ç–µ–∂–æ–º {payment_result['payment_id']}")
            
            return {
                "success": True,
                "order_id": order_id,
                "payment_id": payment_result["payment_id"],
                "payment_url": payment_result["payment_url"],
                "total_amount": final_amount,
                "products_amount": total_price,
                "delivery_amount": delivery_cost,
                "description": description
            }
            
        except Exception as e:
            app_logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å –æ–ø–ª–∞—Ç–æ–π: {e}")
            return {
                "success": False,
                "error": f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"
            }
    
    def _prepare_payment_items(self, products: List[Dict], delivery_info: Optional[Dict] = None) -> List[Dict]:
        """
        –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ÆKassa (54-–§–ó)
        
        Args:
            products: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
            delivery_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —á–µ–∫–∞
        """
        items = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã
        for product in products:
            item = {
                "name": product.get("name", "–¢–æ–≤–∞—Ä"),
                "quantity": product.get("quantity", 1),
                "price": product.get("price", 0)
            }
            items.append(item)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∞–≤–∫—É –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        if delivery_info and delivery_info.get("cost", 0) > 0:
            delivery_item = {
                "name": f"–î–æ—Å—Ç–∞–≤–∫–∞ - {delivery_info.get('service_name', '–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏')}",
                "quantity": 1,
                "price": delivery_info["cost"]
            }
            items.append(delivery_item)
        
        return items
    
    async def get_payment_status(self, payment_id: str) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        
        Args:
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –ø–ª–∞—Ç–µ–∂–∞
        """
        try:
            status_info = await self.payment_client.get_payment_status(payment_id)
            app_logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {status_info.get('status')}")
            return status_info
        except Exception as e:
            app_logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return {"success": False, "error": f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"}
    
    def format_payment_info(self, order_data: Dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏ –æ–ø–ª–∞—Ç–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        
        Args:
            order_data: –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ —Å –ø–ª–∞—Ç–µ–∂–æ–º
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        if not order_data.get("success"):
            return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {order_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
        
        order_id = order_data["order_id"]
        total_amount = order_data["total_amount"]
        products_amount = order_data["products_amount"]
        delivery_amount = order_data.get("delivery_amount", 0)
        payment_url = order_data["payment_url"]
        
        message = f"üõí **–ó–∞–∫–∞–∑ ‚Ññ{order_id} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!**\n\n"
        message += f"üì¶ –¢–æ–≤–∞—Ä—ã: {products_amount:,.0f} ‚ÇΩ\n"
        
        if delivery_amount > 0:
            message += f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {delivery_amount:,.0f} ‚ÇΩ\n"
        
        message += f"üí∞ **–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total_amount:,.0f} ‚ÇΩ**\n\n"
        
        message += f"üí≥ **–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:**\n{payment_url}\n\n"
        
        message += "‚úÖ **–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:**\n"
        message += "‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞\n"
        message += "‚Ä¢ –°–ë–ü (–°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π)\n"  
        message += "‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏\n\n"
        
        message += "‚è∞ –°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 24 —á–∞—Å–∞\n"
        message += "üîí –û–ø–ª–∞—Ç–∞ –∑–∞—â–∏—â–µ–Ω–∞ –ÆKassa"
        
        return message