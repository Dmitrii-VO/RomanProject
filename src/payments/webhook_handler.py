"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhooks –æ—Ç –ÆKassa
"""
from fastapi import FastAPI, Request, HTTPException, BackgroundTasks
from fastapi.responses import JSONResponse
from typing import Dict, Any
import json
from datetime import datetime
from utils.logger import app_logger
from src.payments.yukassa_client import YuKassaClient
from src.integrations.moysklad_client import MoySkladClient
from src.integrations.amocrm_client import AmoCRMClient


class YuKassaWebhookHandler:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhooks –æ—Ç –ÆKassa –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∏ —Å–¥–µ–ª–æ–∫
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ webhooks"""
        self.yukassa_client = YuKassaClient()
        self.moysklad_client = MoySkladClient()
        self.amocrm_client = AmoCRMClient()
        
        app_logger.info("YuKassaWebhookHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def handle_payment_webhook(self, request: Request, background_tasks: BackgroundTasks) -> JSONResponse:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç –ÆKassa
        
        Args:
            request: HTTP –∑–∞–ø—Ä–æ—Å —Å webhook
            background_tasks: –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ FastAPI
            
        Returns:
            HTTP –æ—Ç–≤–µ—Ç –¥–ª—è –ÆKassa
        """
        try:
            # –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            body = await request.body()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            signature = request.headers.get("Authorization")
            if not signature:
                app_logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å—å –≤ webhook")
                raise HTTPException(status_code=400, detail="Missing signature")
            
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∏–∑ –ø–æ–¥–ø–∏—Å–∏
            if signature.startswith("sha256="):
                signature = signature[7:]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å webhook
            if not self.yukassa_client.verify_webhook(body, signature):
                app_logger.error("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook")
                raise HTTPException(status_code=403, detail="Invalid signature")
            
            # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ
            try:
                webhook_data = json.loads(body.decode())
            except json.JSONDecodeError as e:
                app_logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON webhook: {e}")
                raise HTTPException(status_code=400, detail="Invalid JSON")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º webhook –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
            background_tasks.add_task(self._process_webhook_data, webhook_data)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –ÆKassa
            return JSONResponse(
                status_code=200,
                content={"status": "success", "message": "Webhook received"}
            )
            
        except HTTPException:
            raise
        except Exception as e:
            app_logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
            raise HTTPException(status_code=500, detail="Internal server error")
    
    async def _process_webhook_data(self, webhook_data: Dict[str, Any]):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ webhook –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        
        Args:
            webhook_data: –î–∞–Ω–Ω—ã–µ webhook –æ—Ç –ÆKassa
        """
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
            parsed_data = self.yukassa_client.parse_webhook(webhook_data)
            
            if not parsed_data:
                app_logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ webhook")
                return
            
            event_type = parsed_data.get("event_type")
            payment_id = parsed_data.get("payment_id")
            payment_status = parsed_data.get("status")
            order_id = parsed_data.get("order_id")
            
            app_logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook: {event_type}, –ø–ª–∞—Ç–µ–∂: {payment_id}, —Å—Ç–∞—Ç—É—Å: {payment_status}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
            if event_type == "payment.succeeded":
                await self._handle_payment_success(parsed_data)
            elif event_type == "payment.canceled":
                await self._handle_payment_cancellation(parsed_data)
            elif event_type == "payment.waiting_for_capture":
                await self._handle_payment_waiting(parsed_data)
            else:
                app_logger.info(f"–ù–µ–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: {event_type}")
                
        except Exception as e:
            app_logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö webhook: {e}")
    
    async def _handle_payment_success(self, payment_data: Dict[str, Any]):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É
        
        Args:
            payment_data: –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
        """
        try:
            payment_id = payment_data.get("payment_id")
            amount = payment_data.get("amount")
            metadata = payment_data.get("metadata", {})
            
            # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –≤ –ú–æ–π–°–∫–ª–∞–¥ –∏–∑ metadata
            moysklad_order_id = metadata.get("moysklad_order_id")
            telegram_user_id = metadata.get("telegram_user_id")
            
            app_logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞: –ø–ª–∞—Ç–µ–∂ {payment_id}, –∑–∞–∫–∞–∑ –ú–æ–π–°–∫–ª–∞–¥ {moysklad_order_id}, —Å—É–º–º–∞ {amount}‚ÇΩ")
            
            # –ì–ª–∞–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ú–æ–π–°–∫–ª–∞–¥
            if moysklad_order_id:
                result = await self.moysklad_client.process_payment_webhook(
                    moysklad_order_id=moysklad_order_id,
                    payment_amount=amount,
                    payment_id=payment_id,
                    telegram_user_id=int(telegram_user_id) if telegram_user_id and telegram_user_id.isdigit() else None
                )
                
                if result.get("success"):
                    app_logger.info(f"‚úÖ –ú–æ–π–°–∫–ª–∞–¥: –∑–∞–∫–∞–∑ {moysklad_order_id} –æ–±–Ω–æ–≤–ª–µ–Ω, –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É –≤ AmoCRM
                    if telegram_user_id and telegram_user_id.isdigit():
                        await self._update_amocrm_deal_status(
                            int(telegram_user_id),
                            "paid",
                            f"‚úÖ {result.get('message', '–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞')}\nüí∞ –°—É–º–º–∞: {amount}‚ÇΩ\nüÜî –ü–ª–∞—Ç–µ–∂: {payment_id}"
                        )
                    
                    # TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –≤ Telegram
                    # message = result.get('message', '–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞, –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ')
                    # await self._send_telegram_notification(telegram_user_id, message)
                    
                    app_logger.info(f"üéâ –ü–ª–∞—Ç–µ–∂ {payment_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                else:
                    app_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ú–æ–π–°–∫–ª–∞–¥: {result.get('error')}")
            else:
                app_logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç moysklad_order_id –≤ metadata –ø–ª–∞—Ç–µ–∂–∞ {payment_id}")
            
        except Exception as e:
            app_logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã: {e}")
    
    async def _handle_payment_cancellation(self, payment_data: Dict[str, Any]):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –ø–ª–∞—Ç–µ–∂–∞
        
        Args:
            payment_data: –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
        """
        try:
            payment_id = payment_data.get("payment_id")
            order_id = payment_data.get("order_id")
            
            app_logger.info(f"–û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞: {payment_id}, –∑–∞–∫–∞–∑ {order_id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –ú–æ–π–°–∫–ª–∞–¥
            if order_id:
                await self._update_moysklad_order_status(
                    order_id,
                    "cancelled",
                    f"–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω, –ÆKassa –ø–ª–∞—Ç–µ–∂ {payment_id}"
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É –≤ AmoCRM
            telegram_user_id = payment_data.get("metadata", {}).get("telegram_user_id")
            if telegram_user_id:
                await self._update_amocrm_deal_status(
                    telegram_user_id,
                    "cancelled", 
                    f"‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω\\n–ü–ª–∞—Ç–µ–∂ –ÆKassa: {payment_id}\\n–ó–∞–∫–∞–∑: {order_id}"
                )
            
            app_logger.info(f"–û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
            
        except Exception as e:
            app_logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞: {e}")
    
    async def _handle_payment_waiting(self, payment_data: Dict[str, Any]):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        
        Args:
            payment_data: –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
        """
        try:
            payment_id = payment_data.get("payment_id") 
            order_id = payment_data.get("order_id")
            
            app_logger.info(f"–ü–ª–∞—Ç–µ–∂ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {payment_id}, –∑–∞–∫–∞–∑ {order_id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Å–∏—Å—Ç–µ–º–∞—Ö
            if order_id:
                await self._update_moysklad_order_status(
                    order_id,
                    "payment_pending",
                    f"–û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}"
                )
            
            telegram_user_id = payment_data.get("metadata", {}).get("telegram_user_id")
            if telegram_user_id:
                await self._update_amocrm_deal_status(
                    telegram_user_id,
                    "payment_pending",
                    f"‚è≥ –ü–ª–∞—Ç–µ–∂ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\\n–ü–ª–∞—Ç–µ–∂ –ÆKassa: {payment_id}\\n–ó–∞–∫–∞–∑: {order_id}"
                )
            
        except Exception as e:
            app_logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–∂–∏–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
    
    async def _update_moysklad_order_status(self, order_id: str, status: str, note: str) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –ú–æ–π–°–∫–ª–∞–¥
        
        Args:
            order_id: ID –∑–∞–∫–∞–∑–∞ –≤ –ú–æ–π–°–∫–ª–∞–¥
            status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
            note: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
        """
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –ú–æ–π–°–∫–ª–∞–¥
            # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É, —Ç–∞–∫ –∫–∞–∫ —Ç–æ—á–Ω—ã–π API –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ MoySkladClient
            
            app_logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ {order_id} –≤ –ú–æ–π–°–∫–ª–∞–¥: {status} - {note}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ MoySkladClient
            result = await self.moysklad_client.update_order_status(order_id, status, note)
            return result.get("success", False)
            
        except Exception as e:
            app_logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –≤ –ú–æ–π–°–∫–ª–∞–¥: {e}")
            return False
    
    async def _update_amocrm_deal_status(self, telegram_user_id: int, status: str, note: str):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏ –≤ AmoCRM
        
        Args:
            telegram_user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
            note: –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ
        """
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ —Å–¥–µ–ª–∫–µ
            await self.amocrm_client.add_note_to_lead(
                telegram_user_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ lead_id
                note
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥)
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ update_deal_status –≤ AmoCRMClient –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            
            app_logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏ –≤ AmoCRM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user_id}: {status}")
            
        except Exception as e:
            app_logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏ –≤ AmoCRM: {e}")


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
webhook_handler = YuKassaWebhookHandler()


def setup_webhook_routes(app: FastAPI):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è webhooks –≤ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    
    Args:
        app: –≠–∫–∑–µ–º–ø–ª—è—Ä FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    
    @app.post("/webhooks/yukassa")
    async def yukassa_webhook(request: Request, background_tasks: BackgroundTasks):
        """Endpoint –¥–ª—è webhooks –æ—Ç –ÆKassa"""
        return await webhook_handler.handle_payment_webhook(request, background_tasks)
    
    @app.get("/webhooks/yukassa/test")
    async def yukassa_webhook_test():
        """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ webhooks"""
        return {
            "status": "ok",
            "service": "yukassa_webhooks",
            "timestamp": datetime.now().isoformat()
        }
    
    app_logger.info("Webhook –º–∞—Ä—à—Ä—É—Ç—ã –ÆKassa –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: POST /webhooks/yukassa")


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å FastAPI
if __name__ == "__main__":
    import uvicorn
    
    app = FastAPI(title="–ÆKassa Webhooks", version="1.0.0")
    setup_webhook_routes(app)
    
    # –ó–∞–ø—É—Å–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    uvicorn.run(app, host="0.0.0.0", port=8000)