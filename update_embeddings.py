#!/usr/bin/env python3
"""
–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤
"""
import asyncio
import argparse
import sys
from datetime import datetime
from src.search.embeddings_manager import EmbeddingsManager
from src.catalog.product_manager import ProductManager
from utils.logger import app_logger


async def full_update(embeddings_manager: EmbeddingsManager, product_manager: ProductManager):
    """–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"""
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –ú–æ–π–°–∫–ª–∞–¥
    print("üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –ú–æ–π–°–∫–ª–∞–¥...")
    all_products = await product_manager.search_products("", budget_min=None, budget_max=None, category=None)
    
    if not all_products:
        print("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ú–æ–π–°–∫–ª–∞–¥")
        return False
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_products)} —Ç–æ–≤–∞—Ä–æ–≤")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID —Ç–æ–≤–∞—Ä–æ–≤
    current_product_ids = {product['id'] for product in all_products}
    
    # –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
    print("üßπ –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏...")
    deleted_count = await embeddings_manager.cleanup_outdated_embeddings(current_product_ids)
    if deleted_count > 0:
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
    
    # –ú–∞—Å—Å–æ–≤–æ –¥–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
    print("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏...")
    success_count = await embeddings_manager.batch_add_products(all_products)
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {success_count}/{len(all_products)} —Ç–æ–≤–∞—Ä–æ–≤")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = embeddings_manager.get_stats()
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {stats.get('total_products', 0)}")
    print(f"   ‚Ä¢ –ú–æ–¥–µ–ª—å: {stats.get('embedding_model', 'N/A')}")
    print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {stats.get('embedding_dimension', 'N/A')}")
    print(f"   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {stats.get('last_update', 'N/A')}")
    
    categories = stats.get('categories_distribution', {})
    if categories:
        print(f"   ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        for category, count in categories.items():
            print(f"     - {category or '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}: {count}")
    
    return True


async def incremental_update(embeddings_manager: EmbeddingsManager, product_manager: ProductManager):
    """–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –ú–æ–π–°–∫–ª–∞–¥
    print("üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –ú–æ–π–°–∫–ª–∞–¥...")
    all_products = await product_manager.search_products("", budget_min=None, budget_max=None, category=None)
    
    if not all_products:
        print("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ú–æ–π–°–∫–ª–∞–¥")
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏
    existing_ids = embeddings_manager.get_existing_product_ids()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
    new_products = [product for product in all_products if product['id'] not in existing_ids]
    
    if not new_products:
        print("‚úÖ –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        return True
    
    print(f"üÜï –ù–∞–π–¥–µ–Ω–æ {len(new_products)} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
    success_count = await embeddings_manager.batch_add_products(new_products)
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {success_count}/{len(new_products)} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
    
    return True


async def test_search(embeddings_manager: EmbeddingsManager, query: str):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫"""
    print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫: '{query}'")
    
    results = await embeddings_manager.semantic_search(query, limit=5, threshold=0.3)
    
    if not results:
        print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    
    for i, result in enumerate(results, 1):
        print(f"  {i}. {result['name']} (—Å—Ö–æ–¥—Å—Ç–≤–æ: {result['similarity_score']:.3f})")
        print(f"     üí∞ {result['price']:.0f}‚ÇΩ | üìÇ {result.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')}")
        if result.get('description'):
            desc = result['description'][:80]
            print(f"     üìù {desc}{'...' if len(result['description']) > 80 else ''}")
        print()


async def show_stats(embeddings_manager: EmbeddingsManager):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"""
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤:")
    
    stats = embeddings_manager.get_stats()
    
    if not stats:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {stats.get('total_products', 0)}")
    print(f"   ‚Ä¢ –ú–æ–¥–µ–ª—å: {stats.get('embedding_model', 'N/A')}")
    print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–æ–≤: {stats.get('embedding_dimension', 'N/A')}")
    print(f"   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {stats.get('last_update', 'N/A')}")
    
    categories = stats.get('categories_distribution', {})
    if categories:
        print(f"   ‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        for category, count in categories.items():
            print(f"     - {category or '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}: {count} —Ç–æ–≤–∞—Ä–æ–≤")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤")
    
    parser.add_argument("--full", action="store_true", 
                       help="–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
    parser.add_argument("--incremental", action="store_true", 
                       help="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
    parser.add_argument("--test", type=str, metavar="QUERY",
                       help="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º")
    parser.add_argument("--stats", action="store_true",
                       help="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
    
    args = parser.parse_args()
    
    if not any([args.full, args.incremental, args.test, args.stats]):
        parser.print_help()
        return
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        embeddings_manager = EmbeddingsManager()
        product_manager = ProductManager()
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 60)
        
        if args.stats:
            await show_stats(embeddings_manager)
        
        if args.full:
            success = await full_update(embeddings_manager, product_manager)
            if not success:
                sys.exit(1)
        
        if args.incremental:
            success = await incremental_update(embeddings_manager, product_manager)
            if not success:
                sys.exit(1)
        
        if args.test:
            await test_search(embeddings_manager, args.test)
        
        print("=" * 60)
        print("üéâ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        app_logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())