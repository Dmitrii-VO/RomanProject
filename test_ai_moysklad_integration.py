#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ —Å –ú–æ–π–°–∫–ª–∞–¥
"""
import asyncio
import os
from src.ai.consultant import AmberAIConsultant
from utils.logger import app_logger


async def test_ai_product_requests():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º —Ç–æ–≤–∞—Ä–æ–≤")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
    ai_consultant = AmberAIConsultant()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    test_requests = [
        {
            'user_id': 12345,
            'message': '–ü–æ–∫–∞–∂–∏—Ç–µ –º–Ω–µ –∫–æ–ª—å—Ü–∞ –¥–æ 5000 —Ä—É–±–ª–µ–π',
            'description': '–ü–æ–∏—Å–∫ –∫–æ–ª–µ—Ü —Å –±—é–¥–∂–µ—Ç–æ–º'
        },
        {
            'user_id': 12346,
            'message': '–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –∏–∑ —Å–µ—Ä—ë–≥',
            'description': '–ü–æ–∏—Å–∫ —Å–µ—Ä—ë–≥ –±–µ–∑ –±—é–¥–∂–µ—Ç–∞'
        },
        {
            'user_id': 12347,
            'message': '–ü–æ–∫–∞–∂–∏—Ç–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –±—Ä–∞—Å–ª–µ—Ç–æ–≤',
            'description': '–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—Ä–∞—Å–ª–µ—Ç–æ–≤'
        }
    ]
    
    for i, test_case in enumerate(test_requests, 1):
        print(f"\nüß™ –¢–µ—Å—Ç {i}: {test_case['description']}")
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {test_case['user_id']}: {test_case['message']}")
        print("-" * 40)
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
            response = await ai_consultant.process_message(
                test_case['user_id'], 
                test_case['message']
            )
            
            print(f"ü§ñ –û—Ç–≤–µ—Ç –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞:")
            print(response)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ —Ç–æ–≤–∞—Ä—ã
            if 'üõçÔ∏è' in response or 'üíé' in response:
                print("‚úÖ –¢–æ–≤–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∞–∑–∞–Ω—ã!")
            else:
                print("‚ÑπÔ∏è –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ –ø–æ–∫–∞–∑–∞–Ω—ã")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            app_logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞: {e}")
    
    print("\n" + "=" * 60)
    print("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


async def test_budget_parsing_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞ –±—é–¥–∂–µ—Ç–∞ –≤ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–µ"""
    print("\nüí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–∞ –≤ –¥–∏–∞–ª–æ–≥–µ:")
    print("-" * 40)
    
    ai_consultant = AmberAIConsultant()
    
    budget_messages = [
        "–ò—â—É –ø–æ–¥–∞—Ä–æ–∫ –∂–µ–Ω–µ –¥–æ 10000 —Ä—É–±–ª–µ–π, –ø–æ–∫–∞–∂–∏—Ç–µ —á—Ç–æ –µ—Å—Ç—å",
        "–ë—é–¥–∂–µ—Ç —É –º–µ–Ω—è 5 —Ç—ã—Å—è—á, —á—Ç–æ –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å?",
        "–•–æ—á—É –∫–æ–ª—å—Ü–æ –∑–∞ 3000‚ÇΩ –º–∞–∫—Å–∏–º—É–º"
    ]
    
    for i, message in enumerate(budget_messages, 1):
        print(f"\nüß™ –ë—é–¥–∂–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç {i}:")
        print(f"üë§ –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        
        try:
            response = await ai_consultant.process_message(98765 + i, message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
            if any(keyword in response for keyword in ['‚ÇΩ', '—Ä—É–±', 'üí∞', 'üõçÔ∏è']):
                print("‚úÖ –ë—é–¥–∂–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, —Ç–æ–≤–∞—Ä—ã –ø–æ–∫–∞–∑–∞–Ω—ã")
            else:
                print("‚ÑπÔ∏è –ë—é–¥–∂–µ—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∏–ª–∏ —Ç–æ–≤–∞—Ä—ã –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç")
                
            print(f"ü§ñ –û—Ç–≤–µ—Ç: {response[:200]}{'...' if len(response) > 200 else ''}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        required_vars = [
            'OPENAI_API_KEY', 'MOYSKLAD_TOKEN', 
            'AMOCRM_SUBDOMAIN', 'AMOCRM_CLIENT_ID'
        ]
        
        missing_vars = [var for var in required_vars if not os.getenv(var)]
        if missing_vars:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        await test_ai_product_requests()
        await test_budget_parsing_integration()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        app_logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")


if __name__ == "__main__":
    asyncio.run(main())