#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ —è–Ω—Ç–∞—Ä–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
"""
import os
import sys
from dotenv import load_dotenv
from utils.logger import app_logger, log_conversation

def test_environment():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    
    app_logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞")
    
    # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    required_vars = [
        "OPENAI_API_KEY",
        "TELEGRAM_BOT_TOKEN", 
        "TELEGRAM_API_ID",
        "TELEGRAM_API_HASH",
        "MOYSKLAD_TOKEN"
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
            app_logger.warning(f"‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        else:
            # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–µ –∫–ª—é—á–∏ –≤ —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            value = os.getenv(var)
            masked_value = value[:8] + "..." + value[-4:] if len(value) > 12 else "***"
            app_logger.info(f"‚úÖ {var}: {masked_value}")
    
    if missing_vars:
        app_logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        return False
    
    # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫
    try:
        import telethon
        app_logger.info(f"‚úÖ Telethon {telethon.__version__} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError as e:
        app_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Telethon: {e}")
        return False
    
    try:
        import openai
        app_logger.info(f"‚úÖ OpenAI {openai.__version__} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError as e:
        app_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ OpenAI: {e}")
        return False
    
    try:
        import fastapi
        app_logger.info(f"‚úÖ FastAPI {fastapi.__version__} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError as e:
        app_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ FastAPI: {e}")
        return False
    
    # –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
    log_conversation(
        user_id=12345, 
        chat_type="test_message", 
        message="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤"
    )
    app_logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ò–ò
    ai_settings = {
        "temperature": os.getenv("AI_TEMPERATURE", "0.7"),
        "max_tokens": os.getenv("AI_MAX_TOKENS", "500"),
        "presence_penalty": os.getenv("AI_PRESENCE_PENALTY", "0.6"),
        "frequency_penalty": os.getenv("AI_FREQUENCY_PENALTY", "0.5")
    }
    
    app_logger.info("üß† –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò:")
    for key, value in ai_settings.items():
        app_logger.info(f"   {key}: {value}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
    required_dirs = ["logs", "utils", "knowledge_map"]
    for dir_name in required_dirs:
        if os.path.exists(dir_name):
            app_logger.info(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name}/ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            app_logger.warning(f"‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name}/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    app_logger.info("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    return True

def test_hello_world():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Hello World"""
    
    app_logger.info("üëã Hello, –ú–∏—Ä —è–Ω—Ç–∞—Ä–Ω—ã—Ö —É–∫—Ä–∞—à–µ–Ω–∏–π!")
    app_logger.info("üè™ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    # –≠–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    log_conversation(
        user_id=99999,
        chat_type="user_message", 
        message="–ü—Ä–∏–≤–µ—Ç! –•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —è–Ω—Ç–∞—Ä–Ω—ã–µ —É–∫—Ä–∞—à–µ–Ω–∏—è"
    )
    
    log_conversation(
        user_id=99999,
        chat_type="bot_response",
        message="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω —è–Ω—Ç–∞—Ä–Ω—ã—Ö —É–∫—Ä–∞—à–µ–Ω–∏–π! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ–µ –∏–∑–¥–µ–ª–∏–µ. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ - –∫–æ–ª—å—Ü–∞, —Å–µ—Ä—å–≥–∏, –±—Ä–∞—Å–ª–µ—Ç—ã –∏–ª–∏ –ø–æ–¥–≤–µ—Å–∫–∏?"
    )
    
    return True

if __name__ == "__main__":
    print("=" * 60)
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ö–†–£–ñ–ï–ù–ò–Ø –ò–ò –ö–û–ù–°–£–õ–¨–¢–ê–ù–¢–ê")
    print("=" * 60)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        env_ok = test_environment()
        
        print("\n" + "=" * 60)
        print("üëã HELLO WORLD –¢–ï–°–¢")
        print("=" * 60)
        
        # Hello World —Ç–µ—Å—Ç
        hello_ok = test_hello_world()
        
        print("\n" + "=" * 60)
        if env_ok and hello_ok:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
            print("üìù –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ logs/")
            sys.exit(0)
        else:
            print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!")
            print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–µ—Å—Ç")
            sys.exit(1)
            
    except Exception as e:
        print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)