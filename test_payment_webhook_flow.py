#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞:
–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ ‚Üí Webhook ‚Üí –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ú–æ–π–°–∫–ª–∞–¥ ‚Üí –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
"""
import asyncio
import sys
import os
import json
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.payments.yukassa_client import YuKassaClient
from src.integrations.moysklad_client import MoySkladClient
from utils.logger import app_logger


async def test_payment_webhook_flow():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π...")
    
    try:
        # –®–∞–≥ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        yukassa_client = YuKassaClient()
        moysklad_client = MoySkladClient()
        
        print("‚úÖ –ö–ª–∏–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –®–∞–≥ 2: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        print("\nüìù –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑
        orders_response = await moysklad_client._make_request("GET", "entity/customerorder", params={"limit": 1})
        if not orders_response or not orders_response.get("rows"):
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–∫–∞–∑—ã –≤ –ú–æ–π–°–∫–ª–∞–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
            
        test_order = orders_response["rows"][0]
        test_order_id = test_order['id']
        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑: {test_order.get('name', test_order_id)}")
        
        # –®–∞–≥ 3: –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API)
        print("\nüí≥ –ò–º–∏—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞...")
        
        test_payment_data = {
            "amount": 1250.0,
            "order_id": "test_order_123",
            "moysklad_order_id": test_order_id,
            "telegram_user_id": 12345,
            "payment_id": "24b94598-000f-5000-9000-1b68e7b15f3f"
        }
        
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂: {test_payment_data['payment_id']}")
        
        # –®–∞–≥ 4: –ò–º–∏—Ç–∏—Ä—É–µ–º webhook –æ—Ç –ÆKassa
        print("\nüì® –ò–º–∏—Ç–∞—Ü–∏—è webhook –æ—Ç –ÆKassa...")
        
        # –°–æ–∑–¥–∞–µ–º mock webhook –¥–∞–Ω–Ω—ã–µ
        mock_webhook_data = {
            "type": "notification",
            "event": "payment.succeeded",
            "object": {
                "id": test_payment_data["payment_id"],
                "status": "succeeded",
                "amount": {
                    "value": f"{test_payment_data['amount']:.2f}",
                    "currency": "RUB"
                },
                "description": f"–ó–∞–∫–∞–∑ ‚Ññ{test_order_id} - —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂",
                "metadata": {
                    "order_id": test_payment_data["order_id"],
                    "moysklad_order_id": test_payment_data["moysklad_order_id"],
                    "telegram_user_id": str(test_payment_data["telegram_user_id"])
                },
                "created_at": "2024-01-15T10:00:00.000Z"
            }
        }
        
        # –ü–∞—Ä—Å–∏–º webhook –¥–∞–Ω–Ω—ã–µ
        parsed_data = yukassa_client.parse_webhook(mock_webhook_data)
        print(f"‚úÖ Webhook —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω: {parsed_data.get('event_type')}")
        
        # –®–∞–≥ 5: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ú–æ–π–°–∫–ª–∞–¥
        print("\nüè™ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ú–æ–π–°–∫–ª–∞–¥...")
        
        result = await moysklad_client.process_payment_webhook(
            moysklad_order_id=test_order_id,
            payment_amount=test_payment_data["amount"],
            payment_id=test_payment_data["payment_id"],
            telegram_user_id=test_payment_data["telegram_user_id"]
        )
        
        if result.get("success"):
            print(f"‚úÖ –ó–∞–∫–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω: payedSum = {test_payment_data['amount']}‚ÇΩ")
            print(f"‚úÖ –í—Ö–æ–¥—è—â–∏–π –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω: {result.get('customer_payment_id')}")
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {result.get('message')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('error')}")
        
        # –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ú–æ–π–°–∫–ª–∞–¥
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
        updated_order = await moysklad_client.get_customer_order_by_id(test_order_id)
        if updated_order:
            payed_sum = updated_order.get('payedSum', 0) / 100  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –∫–æ–ø–µ–µ–∫
            print(f"‚úÖ –ó–∞–∫–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω: –æ–ø–ª–∞—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞ = {payed_sum}‚ÇΩ")
            print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {updated_order.get('description', '')[-100:]}")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ (–∑–∞–∫–∞–∑ –æ—Å—Ç–∞–µ—Ç—Å—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
        
        print(f"\nüéâ –¢–µ—Å—Ç –ø–æ—Ç–æ–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        app_logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        return False


async def test_create_customer_payment():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç–¥–µ–ª—å–Ω–æ"""
    print("\nüß™ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç: —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞...")
    
    try:
        moysklad_client = MoySkladClient()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —Ç–µ—Å—Ç–∞
        orders_response = await moysklad_client._make_request("GET", "entity/customerorder", params={"limit": 1})
        
        if not orders_response or not orders_response.get("rows"):
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–∫–∞–∑—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        test_order = orders_response["rows"][0]
        test_order_id = test_order["id"]
        
        print(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑: {test_order.get('name', test_order_id)}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≤—Ö–æ–¥—è—â–∏–π –ø–ª–∞—Ç–µ–∂
        payment_result = await moysklad_client.create_customer_payment(
            order_id=test_order_id,
            amount=500.0,  # –¢–µ—Å—Ç–æ–≤–∞—è —Å—É–º–º–∞
            description="–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ API",
            yukassa_payment_id="test_payment_12345"
        )
        
        if payment_result.get("success"):
            print(f"‚úÖ –í—Ö–æ–¥—è—â–∏–π –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω: {payment_result.get('payment_id')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {payment_result.get('error')}")
            
        return payment_result.get("success", False)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –≤—Ö–æ–¥—è—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        return False


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–æ—Ç–æ–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π...\n")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
    main_test_success = asyncio.run(test_payment_webhook_flow())
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç
    payment_test_success = asyncio.run(test_create_customer_payment())
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –ø–ª–∞—Ç–µ–∂–µ–π: {'–ü–†–û–ô–î–ï–ù' if main_test_success else '–ü–†–û–í–ê–õ–ï–ù'}")
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {'–ü–†–û–ô–î–ï–ù' if payment_test_success else '–ü–†–û–í–ê–õ–ï–ù'}")
    
    if main_test_success and payment_test_success:
        print(f"\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–∏–µ–º—É –ø–ª–∞—Ç–µ–∂–µ–π.")
    else:
        print(f"\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")